
DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aa4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006bb8  08006bb8  00016bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d68  08006d68  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08006d68  08006d68  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d68  08006d68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d6c  08006d6c  00016d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08006de0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08006de0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da2c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ef  00000000  00000000  0002dac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0002fcb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00030ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ab  00000000  00000000  00031840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f291  00000000  00000000  00049beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d9f9  00000000  00000000  00058e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6875  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004094  00000000  00000000  000e68c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006b9c 	.word	0x08006b9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006b9c 	.word	0x08006b9c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <ADC_Select_CH3>:
double theta1 = 0;
double theta2 = 0;
double theta3 = 0;

//set stat up adc read positions 1
void ADC_Select_CH3(void) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_3;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <ADC_Select_CH3+0x38>)
 8000a8a:	f001 fef9 	bl	8002880 <HAL_ADC_ConfigChannel>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <ADC_Select_CH3+0x30>
		Error_Handler();
 8000a94:	f000 ffa8 	bl	80019e8 <Error_Handler>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000008c 	.word	0x2000008c

08000aa4 <ADC_Select_CH4>:
//set stat up adc read positions 2
void ADC_Select_CH4(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	; (8000adc <ADC_Select_CH4+0x38>)
 8000ac6:	f001 fedb 	bl	8002880 <HAL_ADC_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <ADC_Select_CH4+0x30>
		Error_Handler();
 8000ad0:	f000 ff8a 	bl	80019e8 <Error_Handler>
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <ADC_Select_CH5>:
//set stat up adc read positions 3
void ADC_Select_CH5(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
	sConfig.Channel = ADC_CHANNEL_5;
 8000af0:	2305      	movs	r3, #5
 8000af2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <ADC_Select_CH5+0x38>)
 8000b02:	f001 febd 	bl	8002880 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <ADC_Select_CH5+0x30>
		Error_Handler();
 8000b0c:	f000 ff6c 	bl	80019e8 <Error_Handler>
	}
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000008c 	.word	0x2000008c
 8000b1c:	00000000 	.word	0x00000000

08000b20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b24:	b08a      	sub	sp, #40	; 0x28
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	if (huart->Instance == huart1.Instance) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b78      	ldr	r3, [pc, #480]	; (8000d10 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	f040 8337 	bne.w	80011a6 <HAL_UART_RxCpltCallback+0x686>
		uart = 3;
 8000b38:	4b76      	ldr	r3, [pc, #472]	; (8000d14 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart1, data, 21);
 8000b3e:	2215      	movs	r2, #21
 8000b40:	4975      	ldr	r1, [pc, #468]	; (8000d18 <HAL_UART_RxCpltCallback+0x1f8>)
 8000b42:	4873      	ldr	r0, [pc, #460]	; (8000d10 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b44:	f004 fab7 	bl	80050b6 <HAL_UART_Receive_IT>

		timestart1 = HAL_GetTick();
 8000b48:	f001 faf6 	bl	8002138 <HAL_GetTick>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a73      	ldr	r2, [pc, #460]	; (8000d1c <HAL_UART_RxCpltCallback+0x1fc>)
 8000b50:	6013      	str	r3, [r2, #0]
		timestart2 = HAL_GetTick();
 8000b52:	f001 faf1 	bl	8002138 <HAL_GetTick>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a71      	ldr	r2, [pc, #452]	; (8000d20 <HAL_UART_RxCpltCallback+0x200>)
 8000b5a:	6013      	str	r3, [r2, #0]
		timestart3 = HAL_GetTick();
 8000b5c:	f001 faec 	bl	8002138 <HAL_GetTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	4a70      	ldr	r2, [pc, #448]	; (8000d24 <HAL_UART_RxCpltCallback+0x204>)
 8000b64:	6013      	str	r3, [r2, #0]

		strncpy(str, data + 1, 4);
 8000b66:	4b70      	ldr	r3, [pc, #448]	; (8000d28 <HAL_UART_RxCpltCallback+0x208>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	486f      	ldr	r0, [pc, #444]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000b6e:	f004 fee7 	bl	8005940 <strncpy>
		pos1 = atoi(str);
 8000b72:	486e      	ldr	r0, [pc, #440]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000b74:	f004 feae 	bl	80058d4 <atoi>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b6c      	ldr	r3, [pc, #432]	; (8000d30 <HAL_UART_RxCpltCallback+0x210>)
 8000b7e:	601a      	str	r2, [r3, #0]
		strncpy(str, "" + 0, 4);
 8000b80:	2204      	movs	r2, #4
 8000b82:	496c      	ldr	r1, [pc, #432]	; (8000d34 <HAL_UART_RxCpltCallback+0x214>)
 8000b84:	4869      	ldr	r0, [pc, #420]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000b86:	f004 fedb 	bl	8005940 <strncpy>
		strncpy(str, data + 6, 1);
 8000b8a:	4b6b      	ldr	r3, [pc, #428]	; (8000d38 <HAL_UART_RxCpltCallback+0x218>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4866      	ldr	r0, [pc, #408]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000b92:	f004 fed5 	bl	8005940 <strncpy>
		direction1 = atoi(str);
 8000b96:	4865      	ldr	r0, [pc, #404]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000b98:	f004 fe9c 	bl	80058d4 <atoi>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b66      	ldr	r3, [pc, #408]	; (8000d3c <HAL_UART_RxCpltCallback+0x21c>)
 8000ba2:	601a      	str	r2, [r3, #0]
		strncpy(str, "" + 0, 4);
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	4963      	ldr	r1, [pc, #396]	; (8000d34 <HAL_UART_RxCpltCallback+0x214>)
 8000ba8:	4860      	ldr	r0, [pc, #384]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000baa:	f004 fec9 	bl	8005940 <strncpy>

		strncpy(str, data + 8, 4);
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <HAL_UART_RxCpltCallback+0x220>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	485d      	ldr	r0, [pc, #372]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000bb6:	f004 fec3 	bl	8005940 <strncpy>
		pos2 = atoi(str);
 8000bba:	485c      	ldr	r0, [pc, #368]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000bbc:	f004 fe8a 	bl	80058d4 <atoi>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b5f      	ldr	r3, [pc, #380]	; (8000d44 <HAL_UART_RxCpltCallback+0x224>)
 8000bc6:	601a      	str	r2, [r3, #0]
		strncpy(str, "" + 0, 4);
 8000bc8:	2204      	movs	r2, #4
 8000bca:	495a      	ldr	r1, [pc, #360]	; (8000d34 <HAL_UART_RxCpltCallback+0x214>)
 8000bcc:	4857      	ldr	r0, [pc, #348]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000bce:	f004 feb7 	bl	8005940 <strncpy>
		strncpy(str, data + 13, 1);
 8000bd2:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <HAL_UART_RxCpltCallback+0x228>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4854      	ldr	r0, [pc, #336]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000bda:	f004 feb1 	bl	8005940 <strncpy>
		direction2 = atoi(str);
 8000bde:	4853      	ldr	r0, [pc, #332]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000be0:	f004 fe78 	bl	80058d4 <atoi>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <HAL_UART_RxCpltCallback+0x22c>)
 8000bea:	601a      	str	r2, [r3, #0]
		strncpy(str, "" + 0, 4);
 8000bec:	2204      	movs	r2, #4
 8000bee:	4951      	ldr	r1, [pc, #324]	; (8000d34 <HAL_UART_RxCpltCallback+0x214>)
 8000bf0:	484e      	ldr	r0, [pc, #312]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000bf2:	f004 fea5 	bl	8005940 <strncpy>

		strncpy(str, data + 15, 4);
 8000bf6:	4b56      	ldr	r3, [pc, #344]	; (8000d50 <HAL_UART_RxCpltCallback+0x230>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	484b      	ldr	r0, [pc, #300]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000bfe:	f004 fe9f 	bl	8005940 <strncpy>
		pos3 = atoi(str);
 8000c02:	484a      	ldr	r0, [pc, #296]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000c04:	f004 fe66 	bl	80058d4 <atoi>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b51      	ldr	r3, [pc, #324]	; (8000d54 <HAL_UART_RxCpltCallback+0x234>)
 8000c0e:	601a      	str	r2, [r3, #0]
		strncpy(str, "" + 0, 4);
 8000c10:	2204      	movs	r2, #4
 8000c12:	4948      	ldr	r1, [pc, #288]	; (8000d34 <HAL_UART_RxCpltCallback+0x214>)
 8000c14:	4845      	ldr	r0, [pc, #276]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000c16:	f004 fe93 	bl	8005940 <strncpy>
		strncpy(str, data + 20, 1);
 8000c1a:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <HAL_UART_RxCpltCallback+0x238>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4842      	ldr	r0, [pc, #264]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000c22:	f004 fe8d 	bl	8005940 <strncpy>
		direction3 = atoi(str);
 8000c26:	4841      	ldr	r0, [pc, #260]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000c28:	f004 fe54 	bl	80058d4 <atoi>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <HAL_UART_RxCpltCallback+0x23c>)
 8000c32:	601a      	str	r2, [r3, #0]
		strncpy(str, "" + 0, 4);
 8000c34:	2204      	movs	r2, #4
 8000c36:	493f      	ldr	r1, [pc, #252]	; (8000d34 <HAL_UART_RxCpltCallback+0x214>)
 8000c38:	483c      	ldr	r0, [pc, #240]	; (8000d2c <HAL_UART_RxCpltCallback+0x20c>)
 8000c3a:	f004 fe81 	bl	8005940 <strncpy>

		if (direction1 == 1) {
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <HAL_UART_RxCpltCallback+0x21c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d106      	bne.n	8000c54 <HAL_UART_RxCpltCallback+0x134>
			angle1 = adc1 + pos1;
 8000c46:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <HAL_UART_RxCpltCallback+0x240>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b39      	ldr	r3, [pc, #228]	; (8000d30 <HAL_UART_RxCpltCallback+0x210>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a44      	ldr	r2, [pc, #272]	; (8000d64 <HAL_UART_RxCpltCallback+0x244>)
 8000c52:	6013      	str	r3, [r2, #0]
		}
		if (direction1 == 0) {
 8000c54:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <HAL_UART_RxCpltCallback+0x21c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d111      	bne.n	8000c80 <HAL_UART_RxCpltCallback+0x160>
			angle1 = adc1 - pos1;
 8000c5c:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <HAL_UART_RxCpltCallback+0x240>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <HAL_UART_RxCpltCallback+0x210>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <HAL_UART_RxCpltCallback+0x244>)
 8000c68:	6013      	str	r3, [r2, #0]
		}
		while (abs(angle1) > 4095) {
 8000c6a:	e009      	b.n	8000c80 <HAL_UART_RxCpltCallback+0x160>
			if (angle1 < 0)
				angle1 = angle1 + 4095;
			if (angle1 > 0)
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <HAL_UART_RxCpltCallback+0x244>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d005      	beq.n	8000c80 <HAL_UART_RxCpltCallback+0x160>
				angle1 = angle1 - 4095;
 8000c74:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <HAL_UART_RxCpltCallback+0x244>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000c7c:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <HAL_UART_RxCpltCallback+0x244>)
 8000c7e:	6013      	str	r3, [r2, #0]
		while (abs(angle1) > 4095) {
 8000c80:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <HAL_UART_RxCpltCallback+0x244>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	bfb8      	it	lt
 8000c88:	425b      	neglt	r3, r3
 8000c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c8e:	daed      	bge.n	8000c6c <HAL_UART_RxCpltCallback+0x14c>
		}
		if (angle1 < 0) {
			angle1 = 4095 + angle1;
		}

		if (direction2 == 1) {
 8000c90:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <HAL_UART_RxCpltCallback+0x22c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d106      	bne.n	8000ca6 <HAL_UART_RxCpltCallback+0x186>
			angle2 = adc2 + pos2;
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <HAL_UART_RxCpltCallback+0x248>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_UART_RxCpltCallback+0x224>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a32      	ldr	r2, [pc, #200]	; (8000d6c <HAL_UART_RxCpltCallback+0x24c>)
 8000ca4:	6013      	str	r3, [r2, #0]
		}
		if (direction2 == 0) {
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_UART_RxCpltCallback+0x22c>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d111      	bne.n	8000cd2 <HAL_UART_RxCpltCallback+0x1b2>
			angle2 = adc2 - pos2;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_UART_RxCpltCallback+0x248>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_UART_RxCpltCallback+0x224>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <HAL_UART_RxCpltCallback+0x24c>)
 8000cba:	6013      	str	r3, [r2, #0]
		}
		while (abs(angle2) > 4095) {
 8000cbc:	e009      	b.n	8000cd2 <HAL_UART_RxCpltCallback+0x1b2>
			if (angle2 < 0)
				angle2 = angle2 + 4095;
			if (angle2 > 0)
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <HAL_UART_RxCpltCallback+0x24c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <HAL_UART_RxCpltCallback+0x1b2>
				angle2 = angle2 - 4095;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <HAL_UART_RxCpltCallback+0x24c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000cce:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <HAL_UART_RxCpltCallback+0x24c>)
 8000cd0:	6013      	str	r3, [r2, #0]
		while (abs(angle2) > 4095) {
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_UART_RxCpltCallback+0x24c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bfb8      	it	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ce0:	daed      	bge.n	8000cbe <HAL_UART_RxCpltCallback+0x19e>
		}
		if (angle2 < 0) {
			angle2 = 4095 + angle2;
		}

		if (direction3 == 1) {
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_UART_RxCpltCallback+0x23c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d106      	bne.n	8000cf8 <HAL_UART_RxCpltCallback+0x1d8>
			angle3 = adc3 + pos3;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_UART_RxCpltCallback+0x250>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_UART_RxCpltCallback+0x234>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_UART_RxCpltCallback+0x254>)
 8000cf6:	6013      	str	r3, [r2, #0]
		}
		if (direction3 == 0) {
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_UART_RxCpltCallback+0x23c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d145      	bne.n	8000d8c <HAL_UART_RxCpltCallback+0x26c>
			angle3 = adc3 - pos3;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_UART_RxCpltCallback+0x250>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <HAL_UART_RxCpltCallback+0x234>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <HAL_UART_RxCpltCallback+0x254>)
 8000d0c:	6013      	str	r3, [r2, #0]
		}
		while (abs(angle3) > 4095) {
 8000d0e:	e03d      	b.n	8000d8c <HAL_UART_RxCpltCallback+0x26c>
 8000d10:	20000194 	.word	0x20000194
 8000d14:	20000228 	.word	0x20000228
 8000d18:	200001e4 	.word	0x200001e4
 8000d1c:	2000022c 	.word	0x2000022c
 8000d20:	20000230 	.word	0x20000230
 8000d24:	20000234 	.word	0x20000234
 8000d28:	200001e5 	.word	0x200001e5
 8000d2c:	200001fc 	.word	0x200001fc
 8000d30:	20000200 	.word	0x20000200
 8000d34:	08006bb8 	.word	0x08006bb8
 8000d38:	200001ea 	.word	0x200001ea
 8000d3c:	20000218 	.word	0x20000218
 8000d40:	200001ec 	.word	0x200001ec
 8000d44:	20000204 	.word	0x20000204
 8000d48:	200001f1 	.word	0x200001f1
 8000d4c:	2000021c 	.word	0x2000021c
 8000d50:	200001f3 	.word	0x200001f3
 8000d54:	20000208 	.word	0x20000208
 8000d58:	200001f8 	.word	0x200001f8
 8000d5c:	20000220 	.word	0x20000220
 8000d60:	200001d8 	.word	0x200001d8
 8000d64:	2000020c 	.word	0x2000020c
 8000d68:	200001dc 	.word	0x200001dc
 8000d6c:	20000210 	.word	0x20000210
 8000d70:	200001e0 	.word	0x200001e0
 8000d74:	20000214 	.word	0x20000214
			if (angle3 < 0)
				angle3 = angle3 + 4095;
			if (angle3 > 0)
 8000d78:	4bd3      	ldr	r3, [pc, #844]	; (80010c8 <HAL_UART_RxCpltCallback+0x5a8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <HAL_UART_RxCpltCallback+0x26c>
				angle3 = angle3 - 4095;
 8000d80:	4bd1      	ldr	r3, [pc, #836]	; (80010c8 <HAL_UART_RxCpltCallback+0x5a8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f6a3 73ff 	subw	r3, r3, #4095	; 0xfff
 8000d88:	4acf      	ldr	r2, [pc, #828]	; (80010c8 <HAL_UART_RxCpltCallback+0x5a8>)
 8000d8a:	6013      	str	r3, [r2, #0]
		while (abs(angle3) > 4095) {
 8000d8c:	4bce      	ldr	r3, [pc, #824]	; (80010c8 <HAL_UART_RxCpltCallback+0x5a8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bfb8      	it	lt
 8000d94:	425b      	neglt	r3, r3
 8000d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d9a:	daed      	bge.n	8000d78 <HAL_UART_RxCpltCallback+0x258>
		if (angle3 < 0) {
			angle3 = 4095 + angle3;
		}

		// math
		theta1 = atan(pos2 / pos1) * 180 / PI;
 8000d9c:	4bcb      	ldr	r3, [pc, #812]	; (80010cc <HAL_UART_RxCpltCallback+0x5ac>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4bcb      	ldr	r3, [pc, #812]	; (80010d0 <HAL_UART_RxCpltCallback+0x5b0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fb13 	bl	80003d4 <__aeabi_ui2d>
 8000dae:	4602      	mov	r2, r0
 8000db0:	460b      	mov	r3, r1
 8000db2:	4610      	mov	r0, r2
 8000db4:	4619      	mov	r1, r3
 8000db6:	f004 fe5f 	bl	8005a78 <atan>
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4bc5      	ldr	r3, [pc, #788]	; (80010d4 <HAL_UART_RxCpltCallback+0x5b4>)
 8000dc0:	f7ff fb82 	bl	80004c8 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	a3bc      	add	r3, pc, #752	; (adr r3, 80010c0 <HAL_UART_RxCpltCallback+0x5a0>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	f7ff fca3 	bl	800071c <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	49bf      	ldr	r1, [pc, #764]	; (80010d8 <HAL_UART_RxCpltCallback+0x5b8>)
 8000ddc:	e9c1 2300 	strd	r2, r3, [r1]

		double cos_theta3 = (pow(pos1, 2) + pow(pos2, 2) - pow(pos3 - L1, 2)
 8000de0:	4bbb      	ldr	r3, [pc, #748]	; (80010d0 <HAL_UART_RxCpltCallback+0x5b0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff faf5 	bl	80003d4 <__aeabi_ui2d>
 8000dea:	f04f 0200 	mov.w	r2, #0
 8000dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df2:	f004 ffcf 	bl	8005d94 <pow>
 8000df6:	4604      	mov	r4, r0
 8000df8:	460d      	mov	r5, r1
 8000dfa:	4bb4      	ldr	r3, [pc, #720]	; (80010cc <HAL_UART_RxCpltCallback+0x5ac>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fae8 	bl	80003d4 <__aeabi_ui2d>
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e0c:	f004 ffc2 	bl	8005d94 <pow>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4620      	mov	r0, r4
 8000e16:	4629      	mov	r1, r5
 8000e18:	f7ff f9a0 	bl	800015c <__adddf3>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4614      	mov	r4, r2
 8000e22:	461d      	mov	r5, r3
 8000e24:	4bad      	ldr	r3, [pc, #692]	; (80010dc <HAL_UART_RxCpltCallback+0x5bc>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3b0d      	subs	r3, #13
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fad2 	bl	80003d4 <__aeabi_ui2d>
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e38:	f004 ffac 	bl	8005d94 <pow>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4620      	mov	r0, r4
 8000e42:	4629      	mov	r1, r5
 8000e44:	f7ff f988 	bl	8000158 <__aeabi_dsub>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
				- pow(L2, 2) - pow(L3, 2)) / (2 * L2 * L3);
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	4ba2      	ldr	r3, [pc, #648]	; (80010e0 <HAL_UART_RxCpltCallback+0x5c0>)
 8000e56:	f7ff f97f 	bl	8000158 <__aeabi_dsub>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	4b9e      	ldr	r3, [pc, #632]	; (80010e0 <HAL_UART_RxCpltCallback+0x5c0>)
 8000e68:	f7ff f976 	bl	8000158 <__aeabi_dsub>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
		double cos_theta3 = (pow(pos1, 2) + pow(pos2, 2) - pow(pos3 - L1, 2)
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b9a      	ldr	r3, [pc, #616]	; (80010e4 <HAL_UART_RxCpltCallback+0x5c4>)
 8000e7a:	f7ff fc4f 	bl	800071c <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double sin_theta3 = sqrt(1 - pow(cos_theta3, 2));
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e92:	f004 ff7f 	bl	8005d94 <pow>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	f04f 0000 	mov.w	r0, #0
 8000e9e:	4992      	ldr	r1, [pc, #584]	; (80010e8 <HAL_UART_RxCpltCallback+0x5c8>)
 8000ea0:	f7ff f95a 	bl	8000158 <__aeabi_dsub>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f004 ffda 	bl	8005e64 <sqrt>
 8000eb0:	e9c7 0106 	strd	r0, r1, [r7, #24]

		theta3 = atan(sin_theta3 / cos_theta3) * 180 / PI;
 8000eb4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000eb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ebc:	f7ff fc2e 	bl	800071c <__aeabi_ddiv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f004 fdd6 	bl	8005a78 <atan>
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b80      	ldr	r3, [pc, #512]	; (80010d4 <HAL_UART_RxCpltCallback+0x5b4>)
 8000ed2:	f7ff faf9 	bl	80004c8 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	a378      	add	r3, pc, #480	; (adr r3, 80010c0 <HAL_UART_RxCpltCallback+0x5a0>)
 8000ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee4:	f7ff fc1a 	bl	800071c <__aeabi_ddiv>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	460b      	mov	r3, r1
 8000eec:	497f      	ldr	r1, [pc, #508]	; (80010ec <HAL_UART_RxCpltCallback+0x5cc>)
 8000eee:	e9c1 2300 	strd	r2, r3, [r1]

		double sin_theta2 = ((L2 + L3 * cos_theta3) * pos1
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	4b7e      	ldr	r3, [pc, #504]	; (80010f0 <HAL_UART_RxCpltCallback+0x5d0>)
 8000ef8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000efc:	f7ff fae4 	bl	80004c8 <__aeabi_dmul>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b78      	ldr	r3, [pc, #480]	; (80010f0 <HAL_UART_RxCpltCallback+0x5d0>)
 8000f0e:	f7ff f925 	bl	800015c <__adddf3>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4614      	mov	r4, r2
 8000f18:	461d      	mov	r5, r3
 8000f1a:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <HAL_UART_RxCpltCallback+0x5b0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fa58 	bl	80003d4 <__aeabi_ui2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff facc 	bl	80004c8 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4690      	mov	r8, r2
 8000f36:	4699      	mov	r9, r3
				+ sqrt(pow(pos1, 1) + pow(pos2, 2)) * L3 * sin_theta3)
 8000f38:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <HAL_UART_RxCpltCallback+0x5b0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fa49 	bl	80003d4 <__aeabi_ui2d>
 8000f42:	4604      	mov	r4, r0
 8000f44:	460d      	mov	r5, r1
 8000f46:	4b61      	ldr	r3, [pc, #388]	; (80010cc <HAL_UART_RxCpltCallback+0x5ac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fa42 	bl	80003d4 <__aeabi_ui2d>
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f58:	f004 ff1c 	bl	8005d94 <pow>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4620      	mov	r0, r4
 8000f62:	4629      	mov	r1, r5
 8000f64:	f7ff f8fa 	bl	800015c <__adddf3>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f004 ff78 	bl	8005e64 <sqrt>
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	4b5d      	ldr	r3, [pc, #372]	; (80010f0 <HAL_UART_RxCpltCallback+0x5d0>)
 8000f7a:	f7ff faa5 	bl	80004c8 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f8a:	f7ff fa9d 	bl	80004c8 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4640      	mov	r0, r8
 8000f94:	4649      	mov	r1, r9
 8000f96:	f7ff f8e1 	bl	800015c <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4614      	mov	r4, r2
 8000fa0:	461d      	mov	r5, r3
				/ (pow(L2, 2) + pow(L3, 2) + 2 * L2 * L3 * cos_theta3);
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <HAL_UART_RxCpltCallback+0x5c4>)
 8000fa8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000fac:	f7ff fa8c 	bl	80004c8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_UART_RxCpltCallback+0x5c4>)
 8000fbe:	f7ff f8cd 	bl	800015c <__adddf3>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
		double sin_theta2 = ((L2 + L3 * cos_theta3) * pos1
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	4629      	mov	r1, r5
 8000fca:	f7ff fba7 	bl	800071c <__aeabi_ddiv>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		double cos_theta2 = (L3 * sin_theta3 * (pos3 - L1)
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_UART_RxCpltCallback+0x5d0>)
 8000fdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fe0:	f7ff fa72 	bl	80004c8 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4614      	mov	r4, r2
 8000fea:	461d      	mov	r5, r3
 8000fec:	4b3b      	ldr	r3, [pc, #236]	; (80010dc <HAL_UART_RxCpltCallback+0x5bc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3b0d      	subs	r3, #13
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f9ee 	bl	80003d4 <__aeabi_ui2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	4629      	mov	r1, r5
 8001000:	f7ff fa62 	bl	80004c8 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4690      	mov	r8, r2
 800100a:	4699      	mov	r9, r3
				+ sqrt(pow(pos1, 2) + pow(pos2, 2)) * (L2 + L3 * cos_theta3))
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <HAL_UART_RxCpltCallback+0x5b0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff f9df 	bl	80003d4 <__aeabi_ui2d>
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800101e:	f004 feb9 	bl	8005d94 <pow>
 8001022:	4604      	mov	r4, r0
 8001024:	460d      	mov	r5, r1
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_UART_RxCpltCallback+0x5ac>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f9d2 	bl	80003d4 <__aeabi_ui2d>
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001038:	f004 feac 	bl	8005d94 <pow>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4620      	mov	r0, r4
 8001042:	4629      	mov	r1, r5
 8001044:	f7ff f88a 	bl	800015c <__adddf3>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f004 ff08 	bl	8005e64 <sqrt>
 8001054:	4604      	mov	r4, r0
 8001056:	460d      	mov	r5, r1
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <HAL_UART_RxCpltCallback+0x5d0>)
 800105e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001062:	f7ff fa31 	bl	80004c8 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_UART_RxCpltCallback+0x5d0>)
 8001074:	f7ff f872 	bl	800015c <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff fa22 	bl	80004c8 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4640      	mov	r0, r8
 800108a:	4649      	mov	r1, r9
 800108c:	f7ff f866 	bl	800015c <__adddf3>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4614      	mov	r4, r2
 8001096:	461d      	mov	r5, r3
				/ (pow(L2, 2) + pow(L3, 2) + 2 * L2 * L3 * cos_theta3);
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_UART_RxCpltCallback+0x5c4>)
 800109e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010a2:	f7ff fa11 	bl	80004c8 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_UART_RxCpltCallback+0x5c4>)
 80010b4:	f7ff f852 	bl	800015c <__adddf3>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
		double cos_theta2 = (L3 * sin_theta3 * (pos3 - L1)
 80010bc:	4620      	mov	r0, r4
 80010be:	e019      	b.n	80010f4 <HAL_UART_RxCpltCallback+0x5d4>
 80010c0:	53c8d4f1 	.word	0x53c8d4f1
 80010c4:	400921fb 	.word	0x400921fb
 80010c8:	20000214 	.word	0x20000214
 80010cc:	20000204 	.word	0x20000204
 80010d0:	20000200 	.word	0x20000200
 80010d4:	40668000 	.word	0x40668000
 80010d8:	20000248 	.word	0x20000248
 80010dc:	20000208 	.word	0x20000208
 80010e0:	40620000 	.word	0x40620000
 80010e4:	40720000 	.word	0x40720000
 80010e8:	3ff00000 	.word	0x3ff00000
 80010ec:	20000258 	.word	0x20000258
 80010f0:	40280000 	.word	0x40280000
 80010f4:	4629      	mov	r1, r5
 80010f6:	f7ff fb11 	bl	800071c <__aeabi_ddiv>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9c7 2302 	strd	r2, r3, [r7, #8]

		theta2 = atan(sin_theta2 / cos_theta3) * 180 / PI;
 8001102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001106:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800110a:	f7ff fb07 	bl	800071c <__aeabi_ddiv>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f004 fcaf 	bl	8005a78 <atan>
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <HAL_UART_RxCpltCallback+0x698>)
 8001120:	f7ff f9d2 	bl	80004c8 <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	a320      	add	r3, pc, #128	; (adr r3, 80011b0 <HAL_UART_RxCpltCallback+0x690>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff faf3 	bl	800071c <__aeabi_ddiv>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	4920      	ldr	r1, [pc, #128]	; (80011bc <HAL_UART_RxCpltCallback+0x69c>)
 800113c:	e9c1 2300 	strd	r2, r3, [r1]
		//end math

		pul1 = 80 * theta1;
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_UART_RxCpltCallback+0x6a0>)
 8001142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_UART_RxCpltCallback+0x6a4>)
 800114c:	f7ff f9bc 	bl	80004c8 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fc66 	bl	8000a28 <__aeabi_d2uiz>
 800115c:	4603      	mov	r3, r0
 800115e:	4a1a      	ldr	r2, [pc, #104]	; (80011c8 <HAL_UART_RxCpltCallback+0x6a8>)
 8001160:	6013      	str	r3, [r2, #0]
		pul2 = 80 * theta2;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_UART_RxCpltCallback+0x69c>)
 8001164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_UART_RxCpltCallback+0x6a4>)
 800116e:	f7ff f9ab 	bl	80004c8 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fc55 	bl	8000a28 <__aeabi_d2uiz>
 800117e:	4603      	mov	r3, r0
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_UART_RxCpltCallback+0x6ac>)
 8001182:	6013      	str	r3, [r2, #0]
		pul3 = 80 * theta3;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_UART_RxCpltCallback+0x6b0>)
 8001186:	e9d3 0100 	ldrd	r0, r1, [r3]
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_UART_RxCpltCallback+0x6a4>)
 8001190:	f7ff f99a 	bl	80004c8 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fc44 	bl	8000a28 <__aeabi_d2uiz>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a0c      	ldr	r2, [pc, #48]	; (80011d4 <HAL_UART_RxCpltCallback+0x6b4>)
 80011a4:	6013      	str	r3, [r2, #0]
	}
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	; 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011b0:	53c8d4f1 	.word	0x53c8d4f1
 80011b4:	400921fb 	.word	0x400921fb
 80011b8:	40668000 	.word	0x40668000
 80011bc:	20000250 	.word	0x20000250
 80011c0:	20000248 	.word	0x20000248
 80011c4:	40540000 	.word	0x40540000
 80011c8:	20000238 	.word	0x20000238
 80011cc:	2000023c 	.word	0x2000023c
 80011d0:	20000258 	.word	0x20000258
 80011d4:	20000240 	.word	0x20000240

080011d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af04      	add	r7, sp, #16

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80011de:	f000 ff53 	bl	8002088 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011e2:	f000 f963 	bl	80014ac <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011e6:	f000 fb6f 	bl	80018c8 <MX_GPIO_Init>
	MX_ADC1_Init();
 80011ea:	f000 f9b7 	bl	800155c <MX_ADC1_Init>
	MX_TIM2_Init();
 80011ee:	f000 fa49 	bl	8001684 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80011f2:	f000 fb3f 	bl	8001874 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80011f6:	f000 fabb 	bl	8001770 <MX_TIM3_Init>
	MX_TIM1_Init();
 80011fa:	f000 f9ed 	bl	80015d8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	ADC_Select_CH3();
 80011fe:	f7ff fc33 	bl	8000a68 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 8001202:	488f      	ldr	r0, [pc, #572]	; (8001440 <main+0x268>)
 8001204:	f001 f87a 	bl	80022fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001208:	210a      	movs	r1, #10
 800120a:	488d      	ldr	r0, [pc, #564]	; (8001440 <main+0x268>)
 800120c:	f001 f950 	bl	80024b0 <HAL_ADC_PollForConversion>
	angle1 = HAL_ADC_GetValue(&hadc1);
 8001210:	488b      	ldr	r0, [pc, #556]	; (8001440 <main+0x268>)
 8001212:	f001 fa53 	bl	80026bc <HAL_ADC_GetValue>
 8001216:	4603      	mov	r3, r0
 8001218:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <main+0x26c>)
 800121a:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 800121c:	4888      	ldr	r0, [pc, #544]	; (8001440 <main+0x268>)
 800121e:	f001 f91b 	bl	8002458 <HAL_ADC_Stop>
	//HAL_Delay(10);
	//read positions 2
	ADC_Select_CH4();
 8001222:	f7ff fc3f 	bl	8000aa4 <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 8001226:	4886      	ldr	r0, [pc, #536]	; (8001440 <main+0x268>)
 8001228:	f001 f868 	bl	80022fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 800122c:	210a      	movs	r1, #10
 800122e:	4884      	ldr	r0, [pc, #528]	; (8001440 <main+0x268>)
 8001230:	f001 f93e 	bl	80024b0 <HAL_ADC_PollForConversion>
	angle2 = HAL_ADC_GetValue(&hadc1);
 8001234:	4882      	ldr	r0, [pc, #520]	; (8001440 <main+0x268>)
 8001236:	f001 fa41 	bl	80026bc <HAL_ADC_GetValue>
 800123a:	4603      	mov	r3, r0
 800123c:	4a82      	ldr	r2, [pc, #520]	; (8001448 <main+0x270>)
 800123e:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8001240:	487f      	ldr	r0, [pc, #508]	; (8001440 <main+0x268>)
 8001242:	f001 f909 	bl	8002458 <HAL_ADC_Stop>
	//HAL_Delay(10);
	//read positions 2
	ADC_Select_CH5();
 8001246:	f7ff fc4b 	bl	8000ae0 <ADC_Select_CH5>
	HAL_ADC_Start(&hadc1);
 800124a:	487d      	ldr	r0, [pc, #500]	; (8001440 <main+0x268>)
 800124c:	f001 f856 	bl	80022fc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001250:	210a      	movs	r1, #10
 8001252:	487b      	ldr	r0, [pc, #492]	; (8001440 <main+0x268>)
 8001254:	f001 f92c 	bl	80024b0 <HAL_ADC_PollForConversion>
	angle3 = HAL_ADC_GetValue(&hadc1);
 8001258:	4879      	ldr	r0, [pc, #484]	; (8001440 <main+0x268>)
 800125a:	f001 fa2f 	bl	80026bc <HAL_ADC_GetValue>
 800125e:	4603      	mov	r3, r0
 8001260:	4a7a      	ldr	r2, [pc, #488]	; (800144c <main+0x274>)
 8001262:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc1);
 8001264:	4876      	ldr	r0, [pc, #472]	; (8001440 <main+0x268>)
 8001266:	f001 f8f7 	bl	8002458 <HAL_ADC_Stop>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_2,500);
//	HAL_Delay(100);
//	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);

	HAL_UART_Receive_IT(&huart1, data, 21);
 800126a:	2215      	movs	r2, #21
 800126c:	4978      	ldr	r1, [pc, #480]	; (8001450 <main+0x278>)
 800126e:	4879      	ldr	r0, [pc, #484]	; (8001454 <main+0x27c>)
 8001270:	f003 ff21 	bl	80050b6 <HAL_UART_Receive_IT>

	Driver_init(&driver1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_2, &htim2,
 8001274:	2304      	movs	r3, #4
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	4b77      	ldr	r3, [pc, #476]	; (8001458 <main+0x280>)
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	2304      	movs	r3, #4
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4b76      	ldr	r3, [pc, #472]	; (800145c <main+0x284>)
 8001282:	2201      	movs	r2, #1
 8001284:	4975      	ldr	r1, [pc, #468]	; (800145c <main+0x284>)
 8001286:	4876      	ldr	r0, [pc, #472]	; (8001460 <main+0x288>)
 8001288:	f000 fe2b 	bl	8001ee2 <Driver_init>
	TIM_CHANNEL_2);
	Driver_init(&driver2, GPIOA, GPIO_PIN_6, GPIOB, GPIO_PIN_0, &htim3,
 800128c:	2304      	movs	r3, #4
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	4b74      	ldr	r3, [pc, #464]	; (8001464 <main+0x28c>)
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2301      	movs	r3, #1
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	4b73      	ldr	r3, [pc, #460]	; (8001468 <main+0x290>)
 800129a:	2240      	movs	r2, #64	; 0x40
 800129c:	496f      	ldr	r1, [pc, #444]	; (800145c <main+0x284>)
 800129e:	4873      	ldr	r0, [pc, #460]	; (800146c <main+0x294>)
 80012a0:	f000 fe1f 	bl	8001ee2 <Driver_init>
	TIM_CHANNEL_2);
	Driver_init(&driver3, GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_11, &htim3,
 80012a4:	230c      	movs	r3, #12
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	4b6e      	ldr	r3, [pc, #440]	; (8001464 <main+0x28c>)
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	4b6d      	ldr	r3, [pc, #436]	; (8001468 <main+0x290>)
 80012b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012b8:	496b      	ldr	r1, [pc, #428]	; (8001468 <main+0x290>)
 80012ba:	486d      	ldr	r0, [pc, #436]	; (8001470 <main+0x298>)
 80012bc:	f000 fe11 	bl	8001ee2 <Driver_init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		millis = HAL_GetTick();
 80012c0:	f000 ff3a 	bl	8002138 <HAL_GetTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a6b      	ldr	r2, [pc, #428]	; (8001474 <main+0x29c>)
 80012c8:	6013      	str	r3, [r2, #0]
		//read positions 1
		ADC_Select_CH3();
 80012ca:	f7ff fbcd 	bl	8000a68 <ADC_Select_CH3>
		HAL_ADC_Start(&hadc1);
 80012ce:	485c      	ldr	r0, [pc, #368]	; (8001440 <main+0x268>)
 80012d0:	f001 f814 	bl	80022fc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80012d4:	210a      	movs	r1, #10
 80012d6:	485a      	ldr	r0, [pc, #360]	; (8001440 <main+0x268>)
 80012d8:	f001 f8ea 	bl	80024b0 <HAL_ADC_PollForConversion>
		adc1 = HAL_ADC_GetValue(&hadc1);
 80012dc:	4858      	ldr	r0, [pc, #352]	; (8001440 <main+0x268>)
 80012de:	f001 f9ed 	bl	80026bc <HAL_ADC_GetValue>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a64      	ldr	r2, [pc, #400]	; (8001478 <main+0x2a0>)
 80012e6:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 80012e8:	4855      	ldr	r0, [pc, #340]	; (8001440 <main+0x268>)
 80012ea:	f001 f8b5 	bl	8002458 <HAL_ADC_Stop>
		//HAL_Delay(10);
		//read positions 2
		ADC_Select_CH4();
 80012ee:	f7ff fbd9 	bl	8000aa4 <ADC_Select_CH4>
		HAL_ADC_Start(&hadc1);
 80012f2:	4853      	ldr	r0, [pc, #332]	; (8001440 <main+0x268>)
 80012f4:	f001 f802 	bl	80022fc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 80012f8:	210a      	movs	r1, #10
 80012fa:	4851      	ldr	r0, [pc, #324]	; (8001440 <main+0x268>)
 80012fc:	f001 f8d8 	bl	80024b0 <HAL_ADC_PollForConversion>
		adc2 = HAL_ADC_GetValue(&hadc1);
 8001300:	484f      	ldr	r0, [pc, #316]	; (8001440 <main+0x268>)
 8001302:	f001 f9db 	bl	80026bc <HAL_ADC_GetValue>
 8001306:	4603      	mov	r3, r0
 8001308:	4a5c      	ldr	r2, [pc, #368]	; (800147c <main+0x2a4>)
 800130a:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 800130c:	484c      	ldr	r0, [pc, #304]	; (8001440 <main+0x268>)
 800130e:	f001 f8a3 	bl	8002458 <HAL_ADC_Stop>
		//HAL_Delay(10);
		//read positions 2
		ADC_Select_CH5();
 8001312:	f7ff fbe5 	bl	8000ae0 <ADC_Select_CH5>
		HAL_ADC_Start(&hadc1);
 8001316:	484a      	ldr	r0, [pc, #296]	; (8001440 <main+0x268>)
 8001318:	f000 fff0 	bl	80022fc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 10);
 800131c:	210a      	movs	r1, #10
 800131e:	4848      	ldr	r0, [pc, #288]	; (8001440 <main+0x268>)
 8001320:	f001 f8c6 	bl	80024b0 <HAL_ADC_PollForConversion>
		adc3 = HAL_ADC_GetValue(&hadc1);
 8001324:	4846      	ldr	r0, [pc, #280]	; (8001440 <main+0x268>)
 8001326:	f001 f9c9 	bl	80026bc <HAL_ADC_GetValue>
 800132a:	4603      	mov	r3, r0
 800132c:	4a54      	ldr	r2, [pc, #336]	; (8001480 <main+0x2a8>)
 800132e:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop(&hadc1);
 8001330:	4843      	ldr	r0, [pc, #268]	; (8001440 <main+0x268>)
 8001332:	f001 f891 	bl	8002458 <HAL_ADC_Stop>
		//HAL_Delay(10);

		//if (uart > 0) {
			//pos1
			if (millis - timestart1 < pul1) {
 8001336:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <main+0x29c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b52      	ldr	r3, [pc, #328]	; (8001484 <main+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	1ad2      	subs	r2, r2, r3
 8001340:	4b51      	ldr	r3, [pc, #324]	; (8001488 <main+0x2b0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d210      	bcs.n	800136a <main+0x192>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4846      	ldr	r0, [pc, #280]	; (8001468 <main+0x290>)
 800134e:	f001 ff6d 	bl	800322c <HAL_GPIO_WritePin>
				if (direction1 == 1) {
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <main+0x2b4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d103      	bne.n	8001362 <main+0x18a>
					Driver_ON(&driver1);
 800135a:	4841      	ldr	r0, [pc, #260]	; (8001460 <main+0x288>)
 800135c:	f000 fe01 	bl	8001f62 <Driver_ON>
 8001360:	e01f      	b.n	80013a2 <main+0x1ca>
				} else {
					Driver_OFF(&driver1);
 8001362:	483f      	ldr	r0, [pc, #252]	; (8001460 <main+0x288>)
 8001364:	f000 fe46 	bl	8001ff4 <Driver_OFF>
 8001368:	e01b      	b.n	80013a2 <main+0x1ca>
				}
			} else if (millis - timestart1 == 0) {
 800136a:	4b42      	ldr	r3, [pc, #264]	; (8001474 <main+0x29c>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b45      	ldr	r3, [pc, #276]	; (8001484 <main+0x2ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d10d      	bne.n	8001392 <main+0x1ba>
				uart--;
 8001376:	4b46      	ldr	r3, [pc, #280]	; (8001490 <main+0x2b8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	4a44      	ldr	r2, [pc, #272]	; (8001490 <main+0x2b8>)
 800137e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	4838      	ldr	r0, [pc, #224]	; (8001468 <main+0x290>)
 8001386:	f001 ff51 	bl	800322c <HAL_GPIO_WritePin>
				Driver_STOP(&driver1);
 800138a:	4835      	ldr	r0, [pc, #212]	; (8001460 <main+0x288>)
 800138c:	f000 fdc7 	bl	8001f1e <Driver_STOP>
 8001390:	e007      	b.n	80013a2 <main+0x1ca>
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	4834      	ldr	r0, [pc, #208]	; (8001468 <main+0x290>)
 8001398:	f001 ff48 	bl	800322c <HAL_GPIO_WritePin>
				Driver_STOP(&driver1);
 800139c:	4830      	ldr	r0, [pc, #192]	; (8001460 <main+0x288>)
 800139e:	f000 fdbe 	bl	8001f1e <Driver_STOP>
			}
			//pos2
			if (millis - timestart2 < pul2) {
 80013a2:	4b34      	ldr	r3, [pc, #208]	; (8001474 <main+0x29c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <main+0x2bc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1ad2      	subs	r2, r2, r3
 80013ac:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <main+0x2c0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d20b      	bcs.n	80013cc <main+0x1f4>
				if (direction2 == 1) {
 80013b4:	4b39      	ldr	r3, [pc, #228]	; (800149c <main+0x2c4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d103      	bne.n	80013c4 <main+0x1ec>
					Driver_ON(&driver2);
 80013bc:	482b      	ldr	r0, [pc, #172]	; (800146c <main+0x294>)
 80013be:	f000 fdd0 	bl	8001f62 <Driver_ON>
 80013c2:	e015      	b.n	80013f0 <main+0x218>
				} else {
					Driver_OFF(&driver2);
 80013c4:	4829      	ldr	r0, [pc, #164]	; (800146c <main+0x294>)
 80013c6:	f000 fe15 	bl	8001ff4 <Driver_OFF>
 80013ca:	e011      	b.n	80013f0 <main+0x218>
				}
			} else if (millis - timestart2 == 0) {
 80013cc:	4b29      	ldr	r3, [pc, #164]	; (8001474 <main+0x29c>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <main+0x2bc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d108      	bne.n	80013ea <main+0x212>
				uart--;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <main+0x2b8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3b01      	subs	r3, #1
 80013de:	4a2c      	ldr	r2, [pc, #176]	; (8001490 <main+0x2b8>)
 80013e0:	6013      	str	r3, [r2, #0]
				Driver_STOP(&driver2);
 80013e2:	4822      	ldr	r0, [pc, #136]	; (800146c <main+0x294>)
 80013e4:	f000 fd9b 	bl	8001f1e <Driver_STOP>
 80013e8:	e002      	b.n	80013f0 <main+0x218>
			} else {
				Driver_STOP(&driver2);
 80013ea:	4820      	ldr	r0, [pc, #128]	; (800146c <main+0x294>)
 80013ec:	f000 fd97 	bl	8001f1e <Driver_STOP>
			}
			//pos3
			if (millis - timestart3 < pul3) {
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <main+0x29c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <main+0x2c8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1ad2      	subs	r2, r2, r3
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <main+0x2cc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d20b      	bcs.n	800141a <main+0x242>
				if (direction3 == 1) {
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <main+0x2d0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d103      	bne.n	8001412 <main+0x23a>
					Driver_OFF(&driver3);
 800140a:	4819      	ldr	r0, [pc, #100]	; (8001470 <main+0x298>)
 800140c:	f000 fdf2 	bl	8001ff4 <Driver_OFF>
 8001410:	e756      	b.n	80012c0 <main+0xe8>
				} else {
					Driver_ON(&driver3);
 8001412:	4817      	ldr	r0, [pc, #92]	; (8001470 <main+0x298>)
 8001414:	f000 fda5 	bl	8001f62 <Driver_ON>
 8001418:	e752      	b.n	80012c0 <main+0xe8>
				}
			} else if (millis - timestart3 == 0) {
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <main+0x29c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <main+0x2c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d108      	bne.n	8001438 <main+0x260>
				uart--;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <main+0x2b8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	4a18      	ldr	r2, [pc, #96]	; (8001490 <main+0x2b8>)
 800142e:	6013      	str	r3, [r2, #0]
				Driver_STOP(&driver3);
 8001430:	480f      	ldr	r0, [pc, #60]	; (8001470 <main+0x298>)
 8001432:	f000 fd74 	bl	8001f1e <Driver_STOP>
 8001436:	e743      	b.n	80012c0 <main+0xe8>
			} else {
				Driver_STOP(&driver3);
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <main+0x298>)
 800143a:	f000 fd70 	bl	8001f1e <Driver_STOP>
		millis = HAL_GetTick();
 800143e:	e73f      	b.n	80012c0 <main+0xe8>
 8001440:	2000008c 	.word	0x2000008c
 8001444:	2000020c 	.word	0x2000020c
 8001448:	20000210 	.word	0x20000210
 800144c:	20000214 	.word	0x20000214
 8001450:	200001e4 	.word	0x200001e4
 8001454:	20000194 	.word	0x20000194
 8001458:	20000104 	.word	0x20000104
 800145c:	40010800 	.word	0x40010800
 8001460:	20000260 	.word	0x20000260
 8001464:	2000014c 	.word	0x2000014c
 8001468:	40010c00 	.word	0x40010c00
 800146c:	20000284 	.word	0x20000284
 8001470:	200002a8 	.word	0x200002a8
 8001474:	20000224 	.word	0x20000224
 8001478:	200001d8 	.word	0x200001d8
 800147c:	200001dc 	.word	0x200001dc
 8001480:	200001e0 	.word	0x200001e0
 8001484:	2000022c 	.word	0x2000022c
 8001488:	20000238 	.word	0x20000238
 800148c:	20000218 	.word	0x20000218
 8001490:	20000228 	.word	0x20000228
 8001494:	20000230 	.word	0x20000230
 8001498:	2000023c 	.word	0x2000023c
 800149c:	2000021c 	.word	0x2000021c
 80014a0:	20000234 	.word	0x20000234
 80014a4:	20000240 	.word	0x20000240
 80014a8:	20000220 	.word	0x20000220

080014ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	; 0x50
 80014b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b6:	2228      	movs	r2, #40	; 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 fa38 	bl	8005930 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e4:	2310      	movs	r3, #16
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e8:	2302      	movs	r3, #2
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80014ec:	2300      	movs	r3, #0
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014f0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 feae 	bl	800325c <HAL_RCC_OscConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x5e>
		Error_Handler();
 8001506:	f000 fa6f 	bl	80019e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800150a:	230f      	movs	r3, #15
 800150c:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150e:	2302      	movs	r3, #2
 8001510:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2102      	movs	r1, #2
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f91a 	bl	8003760 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x8a>
		Error_Handler();
 8001532:	f000 fa59 	bl	80019e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001536:	2302      	movs	r3, #2
 8001538:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800153a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800153e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4618      	mov	r0, r3
 8001544:	f002 faa4 	bl	8003a90 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xa6>
		Error_Handler();
 800154e:	f000 fa4b 	bl	80019e8 <Error_Handler>
	}
}
 8001552:	bf00      	nop
 8001554:	3750      	adds	r7, #80	; 0x50
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <MX_ADC1_Init+0x74>)
 800156e:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <MX_ADC1_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_ADC1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <MX_ADC1_Init+0x74>)
 800157a:	2201      	movs	r2, #1
 800157c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_ADC1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_ADC1_Init+0x74>)
 8001586:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800158a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_ADC1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_ADC1_Init+0x74>)
 8001594:	2201      	movs	r2, #1
 8001596:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC1_Init+0x74>)
 800159a:	f000 fdd7 	bl	800214c <HAL_ADC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80015a4:	f000 fa20 	bl	80019e8 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80015a8:	2303      	movs	r3, #3
 80015aa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_ADC1_Init+0x74>)
 80015ba:	f001 f961 	bl	8002880 <HAL_ADC_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80015c4:	f000 fa10 	bl	80019e8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	2000008c 	.word	0x2000008c
 80015d4:	40012400 	.word	0x40012400

080015d8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_TIM1_Init+0xa4>)
 80015f6:	4a22      	ldr	r2, [pc, #136]	; (8001680 <MX_TIM1_Init+0xa8>)
 80015f8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 63;
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <MX_TIM1_Init+0xa4>)
 80015fc:	223f      	movs	r2, #63	; 0x3f
 80015fe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <MX_TIM1_Init+0xa4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_TIM1_Init+0xa4>)
 8001608:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_TIM1_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_TIM1_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_TIM1_Init+0xa4>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 8001620:	4816      	ldr	r0, [pc, #88]	; (800167c <MX_TIM1_Init+0xa4>)
 8001622:	f002 fd53 	bl	80040cc <HAL_TIM_IC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x58>
		Error_Handler();
 800162c:	f000 f9dc 	bl	80019e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4619      	mov	r1, r3
 800163e:	480f      	ldr	r0, [pc, #60]	; (800167c <MX_TIM1_Init+0xa4>)
 8001640:	f003 fc82 	bl	8004f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 800164a:	f000 f9cd 	bl	80019e8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001652:	2301      	movs	r3, #1
 8001654:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 800165e:	463b      	mov	r3, r7
 8001660:	220c      	movs	r2, #12
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_TIM1_Init+0xa4>)
 8001666:	f002 fe88 	bl	800437a <HAL_TIM_IC_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM1_Init+0x9c>
		Error_Handler();
 8001670:	f000 f9ba 	bl	80019e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200000bc 	.word	0x200000bc
 8001680:	40012c00 	.word	0x40012c00

08001684 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b08e      	sub	sp, #56	; 0x38
 8001688:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800168a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80016b4:	4b2d      	ldr	r3, [pc, #180]	; (800176c <MX_TIM2_Init+0xe8>)
 80016b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 63;
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <MX_TIM2_Init+0xe8>)
 80016be:	223f      	movs	r2, #63	; 0x3f
 80016c0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <MX_TIM2_Init+0xe8>)
 80016c4:	2210      	movs	r2, #16
 80016c6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80016c8:	4b28      	ldr	r3, [pc, #160]	; (800176c <MX_TIM2_Init+0xe8>)
 80016ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ce:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d0:	4b26      	ldr	r3, [pc, #152]	; (800176c <MX_TIM2_Init+0xe8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b25      	ldr	r3, [pc, #148]	; (800176c <MX_TIM2_Init+0xe8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80016dc:	4823      	ldr	r0, [pc, #140]	; (800176c <MX_TIM2_Init+0xe8>)
 80016de:	f002 fb4d 	bl	8003d7c <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0x68>
		Error_Handler();
 80016e8:	f000 f97e 	bl	80019e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80016f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f6:	4619      	mov	r1, r3
 80016f8:	481c      	ldr	r0, [pc, #112]	; (800176c <MX_TIM2_Init+0xe8>)
 80016fa:	f002 ff91 	bl	8004620 <HAL_TIM_ConfigClockSource>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM2_Init+0x84>
		Error_Handler();
 8001704:	f000 f970 	bl	80019e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001708:	4818      	ldr	r0, [pc, #96]	; (800176c <MX_TIM2_Init+0xe8>)
 800170a:	f002 fb86 	bl	8003e1a <HAL_TIM_PWM_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x94>
		Error_Handler();
 8001714:	f000 f968 	bl	80019e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	4619      	mov	r1, r3
 8001726:	4811      	ldr	r0, [pc, #68]	; (800176c <MX_TIM2_Init+0xe8>)
 8001728:	f003 fc0e 	bl	8004f48 <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8001732:	f000 f959 	bl	80019e8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001736:	2360      	movs	r3, #96	; 0x60
 8001738:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2204      	movs	r2, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4807      	ldr	r0, [pc, #28]	; (800176c <MX_TIM2_Init+0xe8>)
 800174e:	f002 fea9 	bl	80044a4 <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8001758:	f000 f946 	bl	80019e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <MX_TIM2_Init+0xe8>)
 800175e:	f000 fa5f 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8001762:	bf00      	nop
 8001764:	3738      	adds	r7, #56	; 0x38
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000104 	.word	0x20000104

08001770 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	; 0x38
 8001774:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001784:	f107 0320 	add.w	r3, r7, #32
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <MX_TIM3_Init+0xfc>)
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <MX_TIM3_Init+0x100>)
 80017a4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <MX_TIM3_Init+0xfc>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <MX_TIM3_Init+0xfc>)
 80017ae:	2210      	movs	r2, #16
 80017b0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80017b2:	4b2e      	ldr	r3, [pc, #184]	; (800186c <MX_TIM3_Init+0xfc>)
 80017b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <MX_TIM3_Init+0xfc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b2a      	ldr	r3, [pc, #168]	; (800186c <MX_TIM3_Init+0xfc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80017c6:	4829      	ldr	r0, [pc, #164]	; (800186c <MX_TIM3_Init+0xfc>)
 80017c8:	f002 fad8 	bl	8003d7c <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM3_Init+0x66>
		Error_Handler();
 80017d2:	f000 f909 	bl	80019e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80017dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4822      	ldr	r0, [pc, #136]	; (800186c <MX_TIM3_Init+0xfc>)
 80017e4:	f002 ff1c 	bl	8004620 <HAL_TIM_ConfigClockSource>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM3_Init+0x82>
		Error_Handler();
 80017ee:	f000 f8fb 	bl	80019e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80017f2:	481e      	ldr	r0, [pc, #120]	; (800186c <MX_TIM3_Init+0xfc>)
 80017f4:	f002 fb11 	bl	8003e1a <HAL_TIM_PWM_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x92>
		Error_Handler();
 80017fe:	f000 f8f3 	bl	80019e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	4619      	mov	r1, r3
 8001810:	4816      	ldr	r0, [pc, #88]	; (800186c <MX_TIM3_Init+0xfc>)
 8001812:	f003 fb99 	bl	8004f48 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800181c:	f000 f8e4 	bl	80019e8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001820:	2360      	movs	r3, #96	; 0x60
 8001822:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001828:	2302      	movs	r3, #2
 800182a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2204      	movs	r2, #4
 8001834:	4619      	mov	r1, r3
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_TIM3_Init+0xfc>)
 8001838:	f002 fe34 	bl	80044a4 <HAL_TIM_PWM_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8001842:	f000 f8d1 	bl	80019e8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	220c      	movs	r2, #12
 800184a:	4619      	mov	r1, r3
 800184c:	4807      	ldr	r0, [pc, #28]	; (800186c <MX_TIM3_Init+0xfc>)
 800184e:	f002 fe29 	bl	80044a4 <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8001858:	f000 f8c6 	bl	80019e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <MX_TIM3_Init+0xfc>)
 800185e:	f000 f9df 	bl	8001c20 <HAL_TIM_MspPostInit>

}
 8001862:	bf00      	nop
 8001864:	3738      	adds	r7, #56	; 0x38
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000014c 	.word	0x2000014c
 8001870:	40000400 	.word	0x40000400

08001874 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <MX_USART1_UART_Init+0x50>)
 800187c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018ac:	f003 fbb6 	bl	800501c <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80018b6:	f000 f897 	bl	80019e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000194 	.word	0x20000194
 80018c4:	40013800 	.word	0x40013800

080018c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <MX_GPIO_Init+0x110>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <MX_GPIO_Init+0x110>)
 80018e2:	f043 0310 	orr.w	r3, r3, #16
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <MX_GPIO_Init+0x110>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018f4:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <MX_GPIO_Init+0x110>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <MX_GPIO_Init+0x110>)
 80018fa:	f043 0320 	orr.w	r3, r3, #32
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <MX_GPIO_Init+0x110>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <MX_GPIO_Init+0x110>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a31      	ldr	r2, [pc, #196]	; (80019d8 <MX_GPIO_Init+0x110>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <MX_GPIO_Init+0x110>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <MX_GPIO_Init+0x110>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <MX_GPIO_Init+0x110>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <MX_GPIO_Init+0x110>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001942:	4826      	ldr	r0, [pc, #152]	; (80019dc <MX_GPIO_Init+0x114>)
 8001944:	f001 fc72 	bl	800322c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_6,
 8001948:	2200      	movs	r2, #0
 800194a:	2145      	movs	r1, #69	; 0x45
 800194c:	4824      	ldr	r0, [pc, #144]	; (80019e0 <MX_GPIO_Init+0x118>)
 800194e:	f001 fc6d 	bl	800322c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001952:	2200      	movs	r2, #0
 8001954:	f648 41e1 	movw	r1, #36065	; 0x8ce1
 8001958:	4822      	ldr	r0, [pc, #136]	; (80019e4 <MX_GPIO_Init+0x11c>)
 800195a:	f001 fc67 	bl	800322c <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_15 | GPIO_PIN_5
					| GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2302      	movs	r3, #2
 800196e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4819      	ldr	r0, [pc, #100]	; (80019dc <MX_GPIO_Init+0x114>)
 8001978:	f001 fadc 	bl	8002f34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA2 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_6;
 800197c:	2345      	movs	r3, #69	; 0x45
 800197e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	2301      	movs	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2302      	movs	r3, #2
 800198a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	4813      	ldr	r0, [pc, #76]	; (80019e0 <MX_GPIO_Init+0x118>)
 8001994:	f001 face 	bl	8002f34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB10 PB11 PB15
	 PB5 PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_15
 8001998:	f648 43e1 	movw	r3, #36065	; 0x8ce1
 800199c:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_GPIO_Init+0x11c>)
 80019b2:	f001 fabf 	bl	8002f34 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 80019b6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80019ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	; (80019e4 <MX_GPIO_Init+0x11c>)
 80019cc:	f001 fab2 	bl	8002f34 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40011000 	.word	0x40011000
 80019e0:	40010800 	.word	0x40010800
 80019e4:	40010c00 	.word	0x40010c00

080019e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>
	...

080019f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <HAL_MspInit+0x5c>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6193      	str	r3, [r2, #24]
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	61d3      	str	r3, [r2, #28]
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_MspInit+0x5c>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a2a:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_MspInit+0x60>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	4a04      	ldr	r2, [pc, #16]	; (8001a54 <HAL_MspInit+0x60>)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010000 	.word	0x40010000

08001a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_ADC_MspInit+0x7c>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d129      	bne.n	8001acc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_ADC_MspInit+0x80>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001aa8:	2338      	movs	r3, #56	; 0x38
 8001aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aac:	2303      	movs	r3, #3
 8001aae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4809      	ldr	r0, [pc, #36]	; (8001adc <HAL_ADC_MspInit+0x84>)
 8001ab8:	f001 fa3c 	bl	8002f34 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	2012      	movs	r0, #18
 8001ac2:	f001 f950 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ac6:	2012      	movs	r0, #18
 8001ac8:	f001 f969 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40012400 	.word	0x40012400
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010800 	.word	0x40010800

08001ae0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_TIM_IC_MspInit+0xb4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d144      	bne.n	8001b8a <HAL_TIM_IC_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_TIM_IC_MspInit+0xb8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_TIM_IC_MspInit+0xb8>)
 8001b06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_TIM_IC_MspInit+0xb8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_TIM_IC_MspInit+0xb8>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_TIM_IC_MspInit+0xb8>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_TIM_IC_MspInit+0xb8>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 0310 	add.w	r3, r7, #16
 8001b42:	4619      	mov	r1, r3
 8001b44:	4815      	ldr	r0, [pc, #84]	; (8001b9c <HAL_TIM_IC_MspInit+0xbc>)
 8001b46:	f001 f9f5 	bl	8002f34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2018      	movs	r0, #24
 8001b50:	f001 f909 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001b54:	2018      	movs	r0, #24
 8001b56:	f001 f922 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2019      	movs	r0, #25
 8001b60:	f001 f901 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b64:	2019      	movs	r0, #25
 8001b66:	f001 f91a 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	201a      	movs	r0, #26
 8001b70:	f001 f8f9 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001b74:	201a      	movs	r0, #26
 8001b76:	f001 f912 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	201b      	movs	r0, #27
 8001b80:	f001 f8f1 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001b84:	201b      	movs	r0, #27
 8001b86:	f001 f90a 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010800 	.word	0x40010800

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb0:	d114      	bne.n	8001bdc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_TIM_Base_MspInit+0x78>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_TIM_Base_MspInit+0x78>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_TIM_Base_MspInit+0x78>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2102      	movs	r1, #2
 8001bce:	201c      	movs	r0, #28
 8001bd0:	f001 f8c9 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bd4:	201c      	movs	r0, #28
 8001bd6:	f001 f8e2 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001bda:	e018      	b.n	8001c0e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_TIM_Base_MspInit+0x7c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d113      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_TIM_Base_MspInit+0x78>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_TIM_Base_MspInit+0x78>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_TIM_Base_MspInit+0x78>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2102      	movs	r1, #2
 8001c02:	201d      	movs	r0, #29
 8001c04:	f001 f8af 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c08:	201d      	movs	r0, #29
 8001c0a:	f001 f8c8 	bl	8002d9e <HAL_NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40000400 	.word	0x40000400

08001c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d118      	bne.n	8001c72 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a27      	ldr	r2, [pc, #156]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2302      	movs	r3, #2
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481f      	ldr	r0, [pc, #124]	; (8001ce8 <HAL_TIM_MspPostInit+0xc8>)
 8001c6c:	f001 f962 	bl	8002f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c70:	e034      	b.n	8001cdc <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <HAL_TIM_MspPostInit+0xcc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d12f      	bne.n	8001cdc <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	6193      	str	r3, [r2, #24]
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6193      	str	r3, [r2, #24]
 8001ca0:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_TIM_MspPostInit+0xc4>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0318 	add.w	r3, r7, #24
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <HAL_TIM_MspPostInit+0xc8>)
 8001cc0:	f001 f938 	bl	8002f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0318 	add.w	r3, r7, #24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <HAL_TIM_MspPostInit+0xd0>)
 8001cd8:	f001 f92c 	bl	8002f34 <HAL_GPIO_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010800 	.word	0x40010800
 8001cec:	40000400 	.word	0x40000400
 8001cf0:	40010c00 	.word	0x40010c00

08001cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_UART_MspInit+0x9c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d139      	bne.n	8001d88 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <HAL_UART_MspInit+0xa0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_UART_MspInit+0xa0>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_UART_MspInit+0xa0>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <HAL_UART_MspInit+0xa0>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <HAL_UART_MspInit+0xa0>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <HAL_UART_MspInit+0xa0>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 0310 	add.w	r3, r7, #16
 8001d56:	4619      	mov	r1, r3
 8001d58:	480f      	ldr	r0, [pc, #60]	; (8001d98 <HAL_UART_MspInit+0xa4>)
 8001d5a:	f001 f8eb 	bl	8002f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	; (8001d98 <HAL_UART_MspInit+0xa4>)
 8001d74:	f001 f8de 	bl	8002f34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	2025      	movs	r0, #37	; 0x25
 8001d7e:	f000 fff2 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d82:	2025      	movs	r0, #37	; 0x25
 8001d84:	f001 f80b 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40013800 	.word	0x40013800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800

08001d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <NMI_Handler+0x4>

08001da2 <HardFault_Handler>:
/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)

{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da6:	e7fe      	b.n	8001da6 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler+0x4>

08001dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler+0x4>

08001db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <UsageFault_Handler+0x4>

08001dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de2:	f000 f997 	bl	8002114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <ADC1_2_IRQHandler+0x10>)
 8001df2:	f000 fc6f 	bl	80026d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000008c 	.word	0x2000008c

08001e00 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <TIM1_BRK_IRQHandler+0x10>)
 8001e06:	f002 f9b0 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200000bc 	.word	0x200000bc

08001e14 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <TIM1_UP_IRQHandler+0x10>)
 8001e1a:	f002 f9a6 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200000bc 	.word	0x200000bc

08001e28 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001e2e:	f002 f99c 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200000bc 	.word	0x200000bc

08001e3c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM1_CC_IRQHandler+0x10>)
 8001e42:	f002 f992 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200000bc 	.word	0x200000bc

08001e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM2_IRQHandler+0x10>)
 8001e56:	f002 f988 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000104 	.word	0x20000104

08001e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM3_IRQHandler+0x10>)
 8001e6a:	f002 f97e 	bl	800416a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000014c 	.word	0x2000014c

08001e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART1_IRQHandler+0x10>)
 8001e7e:	f003 f94b 	bl	8005118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000194 	.word	0x20000194

08001e8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ebe:	f7ff ffe5 	bl	8001e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f003 fd11 	bl	80058e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ec6:	f7ff f987 	bl	80011d8 <main>
  bx lr
 8001eca:	4770      	bx	lr
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ed4:	08006d70 	.word	0x08006d70
  ldr r2, =_sbss
 8001ed8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001edc:	200002d0 	.word	0x200002d0

08001ee0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <CAN1_RX1_IRQHandler>

08001ee2 <Driver_init>:
 */


#include "../Driver_step/Driver_step.h"

void Driver_init(DRIVER_Name* driver,GPIO_TypeDef* EN_PORT,uint32_t EN_PIN,GPIO_TypeDef* DIR_PORT,uint32_t DIR_PIN,TIM_HandleTypeDef* PUL_TIM,uint32_t Channel){
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	603b      	str	r3, [r7, #0]
    driver->EN_PORT = EN_PORT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	601a      	str	r2, [r3, #0]
    driver->EN_PIN = EN_PIN;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	605a      	str	r2, [r3, #4]
    driver->DIR_PORT = DIR_PORT;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	60da      	str	r2, [r3, #12]
    driver->DIR_PIN = DIR_PIN;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	611a      	str	r2, [r3, #16]
    driver->PUL_TIM = PUL_TIM;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	619a      	str	r2, [r3, #24]
    driver->Channel = Channel;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	61da      	str	r2, [r3, #28]
};
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <Driver_STOP>:

void Driver_STOP(DRIVER_Name* driver){
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(driver->EN_PORT, driver->EN_PIN, ON);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	f001 f97a 	bl	800322c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(driver->DIR_PORT, driver->DIR_PIN, OFF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68d8      	ldr	r0, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	f001 f971 	bl	800322c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(driver->PUL_TIM, driver->Channel);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f002 f855 	bl	8004004 <HAL_TIM_PWM_Stop>
};
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <Driver_ON>:

void Driver_ON(DRIVER_Name* driver){
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(driver->EN_PORT, driver->EN_PIN, ON);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2201      	movs	r2, #1
 8001f76:	4619      	mov	r1, r3
 8001f78:	f001 f958 	bl	800322c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(driver->DIR_PORT, driver->DIR_PIN, ON);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68d8      	ldr	r0, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f001 f94f 	bl	800322c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(driver->PUL_TIM, driver->Channel);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f001 ff97 	bl	8003ecc <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d106      	bne.n	8001fb4 <Driver_ON+0x52>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
};
 8001fb2:	e01b      	b.n	8001fec <Driver_ON+0x8a>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d106      	bne.n	8001fca <Driver_ON+0x68>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fc6:	6393      	str	r3, [r2, #56]	; 0x38
};
 8001fc8:	e010      	b.n	8001fec <Driver_ON+0x8a>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d106      	bne.n	8001fe0 <Driver_ON+0x7e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fdc:	63d3      	str	r3, [r2, #60]	; 0x3c
};
 8001fde:	e005      	b.n	8001fec <Driver_ON+0x8a>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fea:	6413      	str	r3, [r2, #64]	; 0x40
};
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <Driver_OFF>:
void Driver_OFF(DRIVER_Name* driver){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(driver->EN_PORT, driver->EN_PIN, ON);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	b29b      	uxth	r3, r3
 8002006:	2201      	movs	r2, #1
 8002008:	4619      	mov	r1, r3
 800200a:	f001 f90f 	bl	800322c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(driver->DIR_PORT, driver->DIR_PIN, OFF);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68d8      	ldr	r0, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	b29b      	uxth	r3, r3
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	f001 f906 	bl	800322c <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(driver->PUL_TIM, driver->Channel);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f001 ff4e 	bl	8003ecc <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <Driver_OFF+0x52>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
};
 8002044:	e01b      	b.n	800207e <Driver_OFF+0x8a>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d106      	bne.n	800205c <Driver_OFF+0x68>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002058:	6393      	str	r3, [r2, #56]	; 0x38
};
 800205a:	e010      	b.n	800207e <Driver_OFF+0x8a>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d106      	bne.n	8002072 <Driver_OFF+0x7e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800206e:	63d3      	str	r3, [r2, #60]	; 0x3c
};
 8002070:	e005      	b.n	800207e <Driver_OFF+0x8a>
	__HAL_TIM_SetCompare(driver->PUL_TIM,driver->Channel,COMPARE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
};
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_Init+0x28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_Init+0x28>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002098:	2003      	movs	r0, #3
 800209a:	f000 fe59 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f808 	bl	80020b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a4:	f7ff fca6 	bl	80019f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_InitTick+0x54>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x58>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fe71 	bl	8002dba <HAL_SYSTICK_Config>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e00e      	b.n	8002100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d80a      	bhi.n	80020fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020e8:	2200      	movs	r2, #0
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f000 fe39 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f4:	4a06      	ldr	r2, [pc, #24]	; (8002110 <HAL_InitTick+0x5c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000000 	.word	0x20000000
 800210c:	20000008 	.word	0x20000008
 8002110:	20000004 	.word	0x20000004

08002114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_IncTick+0x1c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_IncTick+0x20>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a03      	ldr	r2, [pc, #12]	; (8002134 <HAL_IncTick+0x20>)
 8002126:	6013      	str	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000008 	.word	0x20000008
 8002134:	200002cc 	.word	0x200002cc

08002138 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return uwTick;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_GetTick+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	200002cc 	.word	0x200002cc

0800214c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0be      	b.n	80022ec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fc64 	bl	8001a58 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fcc7 	bl	8002b24 <ADC_ConversionStop_Disable>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f040 8099 	bne.w	80022da <HAL_ADC_Init+0x18e>
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8095 	bne.w	80022da <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b8:	f023 0302 	bic.w	r3, r3, #2
 80021bc:	f043 0202 	orr.w	r2, r3, #2
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7b1b      	ldrb	r3, [r3, #12]
 80021d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e4:	d003      	beq.n	80021ee <HAL_ADC_Init+0xa2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d102      	bne.n	80021f4 <HAL_ADC_Init+0xa8>
 80021ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f2:	e000      	b.n	80021f6 <HAL_ADC_Init+0xaa>
 80021f4:	2300      	movs	r3, #0
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7d1b      	ldrb	r3, [r3, #20]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d119      	bne.n	8002238 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7b1b      	ldrb	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	3b01      	subs	r3, #1
 8002212:	035a      	lsls	r2, r3, #13
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e00b      	b.n	8002238 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f043 0220 	orr.w	r2, r3, #32
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	430a      	orrs	r2, r1
 800224a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <HAL_ADC_Init+0x1a8>)
 8002254:	4013      	ands	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	430b      	orrs	r3, r1
 800225e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002268:	d003      	beq.n	8002272 <HAL_ADC_Init+0x126>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d104      	bne.n	800227c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	3b01      	subs	r3, #1
 8002278:	051b      	lsls	r3, r3, #20
 800227a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	430a      	orrs	r2, r1
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_ADC_Init+0x1ac>)
 8002298:	4013      	ands	r3, r2
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	429a      	cmp	r2, r3
 800229e:	d10b      	bne.n	80022b8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022b6:	e018      	b.n	80022ea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	f023 0312 	bic.w	r3, r3, #18
 80022c0:	f043 0210 	orr.w	r2, r3, #16
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f043 0201 	orr.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022d8:	e007      	b.n	80022ea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	ffe1f7fd 	.word	0xffe1f7fd
 80022f8:	ff1f0efe 	.word	0xff1f0efe

080022fc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Start+0x1a>
 8002312:	2302      	movs	r3, #2
 8002314:	e098      	b.n	8002448 <HAL_ADC_Start+0x14c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */

  tmp_hal_status = ADC_Enable(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fba6 	bl	8002a70 <ADC_Enable>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8087 	bne.w	800243e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a41      	ldr	r2, [pc, #260]	; (8002450 <HAL_ADC_Start+0x154>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d105      	bne.n	800235a <HAL_ADC_Start+0x5e>
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_ADC_Start+0x158>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d115      	bne.n	8002386 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d026      	beq.n	80023c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800237c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002384:	e01d      	b.n	80023c2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <HAL_ADC_Start+0x158>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d004      	beq.n	80023a6 <HAL_ADC_Start+0xaa>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2b      	ldr	r2, [pc, #172]	; (8002450 <HAL_ADC_Start+0x154>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d10d      	bne.n	80023c2 <HAL_ADC_Start+0xc6>
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <HAL_ADC_Start+0x158>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	f023 0206 	bic.w	r2, r3, #6
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80023da:	e002      	b.n	80023e2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f06f 0202 	mvn.w	r2, #2
 80023f2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002402:	d113      	bne.n	800242c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002408:	4a11      	ldr	r2, [pc, #68]	; (8002450 <HAL_ADC_Start+0x154>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d105      	bne.n	800241a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_ADC_Start+0x158>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	e00c      	b.n	8002446 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e003      	b.n	8002446 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40012800 	.word	0x40012800
 8002454:	40012400 	.word	0x40012400

08002458 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Stop+0x1a>
 800246e:	2302      	movs	r3, #2
 8002470:	e01a      	b.n	80024a8 <HAL_ADC_Stop+0x50>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fb52 	bl	8002b24 <ADC_ConversionStop_Disable>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d109      	bne.n	800249e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024c6:	f7ff fe37 	bl	8002138 <HAL_GetTick>
 80024ca:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0d3      	b.n	800269a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d131      	bne.n	8002564 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800250a:	2b00      	cmp	r3, #0
 800250c:	d12a      	bne.n	8002564 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800250e:	e021      	b.n	8002554 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d01d      	beq.n	8002554 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_ADC_PollForConversion+0x7e>
 800251e:	f7ff fe0b 	bl	8002138 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d212      	bcs.n	8002554 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f043 0204 	orr.w	r2, r3, #4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0a2      	b.n	800269a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0d6      	beq.n	8002510 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002562:	e070      	b.n	8002646 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002564:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_ADC_PollForConversion+0x1f4>)
 8002566:	681c      	ldr	r4, [r3, #0]
 8002568:	2002      	movs	r0, #2
 800256a:	f001 fb47 	bl	8003bfc <HAL_RCCEx_GetPeriphCLKFreq>
 800256e:	4603      	mov	r3, r0
 8002570:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_ADC_PollForConversion+0x1f8>)
 800257c:	400b      	ands	r3, r1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_ADC_PollForConversion+0x104>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68d9      	ldr	r1, [r3, #12]
 8002588:	4b48      	ldr	r3, [pc, #288]	; (80026ac <HAL_ADC_PollForConversion+0x1fc>)
 800258a:	400b      	ands	r3, r1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d111      	bne.n	80025b4 <HAL_ADC_PollForConversion+0x104>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6919      	ldr	r1, [r3, #16]
 8002596:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <HAL_ADC_PollForConversion+0x200>)
 8002598:	400b      	ands	r3, r1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d108      	bne.n	80025b0 <HAL_ADC_PollForConversion+0x100>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68d9      	ldr	r1, [r3, #12]
 80025a4:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <HAL_ADC_PollForConversion+0x204>)
 80025a6:	400b      	ands	r3, r1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_PollForConversion+0x100>
 80025ac:	2314      	movs	r3, #20
 80025ae:	e020      	b.n	80025f2 <HAL_ADC_PollForConversion+0x142>
 80025b0:	2329      	movs	r3, #41	; 0x29
 80025b2:	e01e      	b.n	80025f2 <HAL_ADC_PollForConversion+0x142>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6919      	ldr	r1, [r3, #16]
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <HAL_ADC_PollForConversion+0x200>)
 80025bc:	400b      	ands	r3, r1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_ADC_PollForConversion+0x120>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68d9      	ldr	r1, [r3, #12]
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_ADC_PollForConversion+0x204>)
 80025ca:	400b      	ands	r3, r1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <HAL_ADC_PollForConversion+0x13c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6919      	ldr	r1, [r3, #16]
 80025d6:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <HAL_ADC_PollForConversion+0x208>)
 80025d8:	400b      	ands	r3, r1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d108      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x140>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68d9      	ldr	r1, [r3, #12]
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_ADC_PollForConversion+0x208>)
 80025e6:	400b      	ands	r3, r1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_PollForConversion+0x140>
 80025ec:	2354      	movs	r3, #84	; 0x54
 80025ee:	e000      	b.n	80025f2 <HAL_ADC_PollForConversion+0x142>
 80025f0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025f8:	e021      	b.n	800263e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d01a      	beq.n	8002638 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_ADC_PollForConversion+0x168>
 8002608:	f7ff fd96 	bl	8002138 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d20f      	bcs.n	8002638 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	429a      	cmp	r2, r3
 800261e:	d90b      	bls.n	8002638 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	f043 0204 	orr.w	r2, r3, #4
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e030      	b.n	800269a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3301      	adds	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	429a      	cmp	r2, r3
 8002644:	d8d9      	bhi.n	80025fa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f06f 0212 	mvn.w	r2, #18
 800264e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002666:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800266a:	d115      	bne.n	8002698 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002670:	2b00      	cmp	r3, #0
 8002672:	d111      	bne.n	8002698 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d105      	bne.n	8002698 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000000 	.word	0x20000000
 80026a8:	24924924 	.word	0x24924924
 80026ac:	00924924 	.word	0x00924924
 80026b0:	12492492 	.word	0x12492492
 80026b4:	00492492 	.word	0x00492492
 80026b8:	00249249 	.word	0x00249249

080026bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d140      	bne.n	800276c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d139      	bne.n	800276c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800271a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800271e:	d11d      	bne.n	800275c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002724:	2b00      	cmp	r3, #0
 8002726:	d119      	bne.n	800275c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0220 	bic.w	r2, r2, #32
 8002736:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d105      	bne.n	800275c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f87c 	bl	800285a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f06f 0212 	mvn.w	r2, #18
 800276a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b80      	cmp	r3, #128	; 0x80
 8002778:	d14f      	bne.n	800281a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d148      	bne.n	800281a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80027aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80027ae:	d012      	beq.n	80027d6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d125      	bne.n	800280a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80027c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027cc:	d11d      	bne.n	800280a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d119      	bne.n	800280a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f9cb 	bl	8002ba6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 020c 	mvn.w	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d114      	bne.n	8002852 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10d      	bne.n	8002852 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f812 	bl	800286c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0201 	mvn.w	r2, #1
 8002850:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x20>
 800289c:	2302      	movs	r3, #2
 800289e:	e0dc      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x1da>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b06      	cmp	r3, #6
 80028ae:	d81c      	bhi.n	80028ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	3b05      	subs	r3, #5
 80028c2:	221f      	movs	r2, #31
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4019      	ands	r1, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	3b05      	subs	r3, #5
 80028dc:	fa00 f203 	lsl.w	r2, r0, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	635a      	str	r2, [r3, #52]	; 0x34
 80028e8:	e03c      	b.n	8002964 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d81c      	bhi.n	800292c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	3b23      	subs	r3, #35	; 0x23
 8002904:	221f      	movs	r2, #31
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	4019      	ands	r1, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	3b23      	subs	r3, #35	; 0x23
 800291e:	fa00 f203 	lsl.w	r2, r0, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
 800292a:	e01b      	b.n	8002964 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b41      	subs	r3, #65	; 0x41
 800293e:	221f      	movs	r2, #31
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	4019      	ands	r1, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	3b41      	subs	r3, #65	; 0x41
 8002958:	fa00 f203 	lsl.w	r2, r0, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b09      	cmp	r3, #9
 800296a:	d91c      	bls.n	80029a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	3b1e      	subs	r3, #30
 800297e:	2207      	movs	r2, #7
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	4019      	ands	r1, r3
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6898      	ldr	r0, [r3, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	3b1e      	subs	r3, #30
 8002998:	fa00 f203 	lsl.w	r2, r0, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	e019      	b.n	80029da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6919      	ldr	r1, [r3, #16]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	2207      	movs	r2, #7
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	4019      	ands	r1, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6898      	ldr	r0, [r3, #8]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	fa00 f203 	lsl.w	r2, r0, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b10      	cmp	r3, #16
 80029e0:	d003      	beq.n	80029ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029e6:	2b11      	cmp	r3, #17
 80029e8:	d132      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_ADC_ConfigChannel+0x1e4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d125      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d126      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d11a      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <HAL_ADC_ConfigChannel+0x1ec>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	0c9a      	lsrs	r2, r3, #18
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a30:	e002      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f9      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x1b2>
 8002a3e:	e007      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012400 	.word	0x40012400
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	431bde83 	.word	0x431bde83

08002a70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d040      	beq.n	8002b10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <ADC_Enable+0xac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1f      	ldr	r2, [pc, #124]	; (8002b20 <ADC_Enable+0xb0>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	0c9b      	lsrs	r3, r3, #18
 8002aaa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aac:	e002      	b.n	8002ab4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f9      	bne.n	8002aae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aba:	f7ff fb3d 	bl	8002138 <HAL_GetTick>
 8002abe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ac0:	e01f      	b.n	8002b02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ac2:	f7ff fb39 	bl	8002138 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d918      	bls.n	8002b02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d011      	beq.n	8002b02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d1d8      	bne.n	8002ac2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	431bde83 	.word	0x431bde83

08002b24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d12e      	bne.n	8002b9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b4e:	f7ff faf3 	bl	8002138 <HAL_GetTick>
 8002b52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b54:	e01b      	b.n	8002b8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b56:	f7ff faef 	bl	8002138 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d914      	bls.n	8002b8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d10d      	bne.n	8002b8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	f043 0210 	orr.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f043 0201 	orr.w	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e007      	b.n	8002b9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d0dc      	beq.n	8002b56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bea:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <__NVIC_SetPriorityGrouping+0x44>)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	60d3      	str	r3, [r2, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <__NVIC_GetPriorityGrouping+0x18>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	f003 0307 	and.w	r3, r3, #7
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	db0b      	blt.n	8002c46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	4906      	ldr	r1, [pc, #24]	; (8002c50 <__NVIC_EnableIRQ+0x34>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f7ff ff90 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff2d 	bl	8002bb8 <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff42 	bl	8002c00 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff90 	bl	8002ca8 <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff5f 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff35 	bl	8002c1c <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ffa2 	bl	8002d0c <SysTick_Config>
 8002dc8:	4603      	mov	r3, r0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d008      	beq.n	8002dfa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e020      	b.n	8002e3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 020e 	bic.w	r2, r2, #14
 8002e08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	2101      	movs	r1, #1
 8002e24:	fa01 f202 	lsl.w	r2, r1, r2
 8002e28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d005      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2204      	movs	r2, #4
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e051      	b.n	8002f0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 020e 	bic.w	r2, r2, #14
 8002e78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a22      	ldr	r2, [pc, #136]	; (8002f18 <HAL_DMA_Abort_IT+0xd0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d029      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0xa0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <HAL_DMA_Abort_IT+0xd4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x9c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <HAL_DMA_Abort_IT+0xd8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01a      	beq.n	8002ede <HAL_DMA_Abort_IT+0x96>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <HAL_DMA_Abort_IT+0xdc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d012      	beq.n	8002ed8 <HAL_DMA_Abort_IT+0x90>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_DMA_Abort_IT+0xe0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00a      	beq.n	8002ed2 <HAL_DMA_Abort_IT+0x8a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_DMA_Abort_IT+0xe4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d102      	bne.n	8002ecc <HAL_DMA_Abort_IT+0x84>
 8002ec6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eca:	e00e      	b.n	8002eea <HAL_DMA_Abort_IT+0xa2>
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed0:	e00b      	b.n	8002eea <HAL_DMA_Abort_IT+0xa2>
 8002ed2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed6:	e008      	b.n	8002eea <HAL_DMA_Abort_IT+0xa2>
 8002ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002edc:	e005      	b.n	8002eea <HAL_DMA_Abort_IT+0xa2>
 8002ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee2:	e002      	b.n	8002eea <HAL_DMA_Abort_IT+0xa2>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	e000      	b.n	8002eea <HAL_DMA_Abort_IT+0xa2>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <HAL_DMA_Abort_IT+0xe8>)
 8002eec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
    } 
  }
  return status;
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40020008 	.word	0x40020008
 8002f1c:	4002001c 	.word	0x4002001c
 8002f20:	40020030 	.word	0x40020030
 8002f24:	40020044 	.word	0x40020044
 8002f28:	40020058 	.word	0x40020058
 8002f2c:	4002006c 	.word	0x4002006c
 8002f30:	40020000 	.word	0x40020000

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b08b      	sub	sp, #44	; 0x2c
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f46:	e161      	b.n	800320c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f48:	2201      	movs	r2, #1
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8150 	bne.w	8003206 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a97      	ldr	r2, [pc, #604]	; (80031c8 <HAL_GPIO_Init+0x294>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d05e      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f70:	4a95      	ldr	r2, [pc, #596]	; (80031c8 <HAL_GPIO_Init+0x294>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d875      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f76:	4a95      	ldr	r2, [pc, #596]	; (80031cc <HAL_GPIO_Init+0x298>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d058      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f7c:	4a93      	ldr	r2, [pc, #588]	; (80031cc <HAL_GPIO_Init+0x298>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d86f      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f82:	4a93      	ldr	r2, [pc, #588]	; (80031d0 <HAL_GPIO_Init+0x29c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d052      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f88:	4a91      	ldr	r2, [pc, #580]	; (80031d0 <HAL_GPIO_Init+0x29c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d869      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f8e:	4a91      	ldr	r2, [pc, #580]	; (80031d4 <HAL_GPIO_Init+0x2a0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04c      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002f94:	4a8f      	ldr	r2, [pc, #572]	; (80031d4 <HAL_GPIO_Init+0x2a0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d863      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002f9a:	4a8f      	ldr	r2, [pc, #572]	; (80031d8 <HAL_GPIO_Init+0x2a4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d046      	beq.n	800302e <HAL_GPIO_Init+0xfa>
 8002fa0:	4a8d      	ldr	r2, [pc, #564]	; (80031d8 <HAL_GPIO_Init+0x2a4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d85d      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d82a      	bhi.n	8003000 <HAL_GPIO_Init+0xcc>
 8002faa:	2b12      	cmp	r3, #18
 8002fac:	d859      	bhi.n	8003062 <HAL_GPIO_Init+0x12e>
 8002fae:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <HAL_GPIO_Init+0x80>)
 8002fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb4:	0800302f 	.word	0x0800302f
 8002fb8:	08003009 	.word	0x08003009
 8002fbc:	0800301b 	.word	0x0800301b
 8002fc0:	0800305d 	.word	0x0800305d
 8002fc4:	08003063 	.word	0x08003063
 8002fc8:	08003063 	.word	0x08003063
 8002fcc:	08003063 	.word	0x08003063
 8002fd0:	08003063 	.word	0x08003063
 8002fd4:	08003063 	.word	0x08003063
 8002fd8:	08003063 	.word	0x08003063
 8002fdc:	08003063 	.word	0x08003063
 8002fe0:	08003063 	.word	0x08003063
 8002fe4:	08003063 	.word	0x08003063
 8002fe8:	08003063 	.word	0x08003063
 8002fec:	08003063 	.word	0x08003063
 8002ff0:	08003063 	.word	0x08003063
 8002ff4:	08003063 	.word	0x08003063
 8002ff8:	08003011 	.word	0x08003011
 8002ffc:	08003025 	.word	0x08003025
 8003000:	4a76      	ldr	r2, [pc, #472]	; (80031dc <HAL_GPIO_Init+0x2a8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003006:	e02c      	b.n	8003062 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e029      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	3304      	adds	r3, #4
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e024      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	3308      	adds	r3, #8
 8003020:	623b      	str	r3, [r7, #32]
          break;
 8003022:	e01f      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	330c      	adds	r3, #12
 800302a:	623b      	str	r3, [r7, #32]
          break;
 800302c:	e01a      	b.n	8003064 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003036:	2304      	movs	r3, #4
 8003038:	623b      	str	r3, [r7, #32]
          break;
 800303a:	e013      	b.n	8003064 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003044:	2308      	movs	r3, #8
 8003046:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	611a      	str	r2, [r3, #16]
          break;
 800304e:	e009      	b.n	8003064 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003050:	2308      	movs	r3, #8
 8003052:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	615a      	str	r2, [r3, #20]
          break;
 800305a:	e003      	b.n	8003064 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	e000      	b.n	8003064 <HAL_GPIO_Init+0x130>
          break;
 8003062:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	d801      	bhi.n	800306e <HAL_GPIO_Init+0x13a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	e001      	b.n	8003072 <HAL_GPIO_Init+0x13e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2bff      	cmp	r3, #255	; 0xff
 8003078:	d802      	bhi.n	8003080 <HAL_GPIO_Init+0x14c>
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	e002      	b.n	8003086 <HAL_GPIO_Init+0x152>
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	3b08      	subs	r3, #8
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	210f      	movs	r1, #15
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	401a      	ands	r2, r3
 8003098:	6a39      	ldr	r1, [r7, #32]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	431a      	orrs	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80a9 	beq.w	8003206 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030b4:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_GPIO_Init+0x2ac>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4a49      	ldr	r2, [pc, #292]	; (80031e0 <HAL_GPIO_Init+0x2ac>)
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	6193      	str	r3, [r2, #24]
 80030c0:	4b47      	ldr	r3, [pc, #284]	; (80031e0 <HAL_GPIO_Init+0x2ac>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030cc:	4a45      	ldr	r2, [pc, #276]	; (80031e4 <HAL_GPIO_Init+0x2b0>)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	3302      	adds	r3, #2
 80030d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	220f      	movs	r2, #15
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3d      	ldr	r2, [pc, #244]	; (80031e8 <HAL_GPIO_Init+0x2b4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00d      	beq.n	8003114 <HAL_GPIO_Init+0x1e0>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <HAL_GPIO_Init+0x2b8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <HAL_GPIO_Init+0x1dc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <HAL_GPIO_Init+0x2bc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d101      	bne.n	800310c <HAL_GPIO_Init+0x1d8>
 8003108:	2302      	movs	r3, #2
 800310a:	e004      	b.n	8003116 <HAL_GPIO_Init+0x1e2>
 800310c:	2303      	movs	r3, #3
 800310e:	e002      	b.n	8003116 <HAL_GPIO_Init+0x1e2>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_GPIO_Init+0x1e2>
 8003114:	2300      	movs	r3, #0
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	f002 0203 	and.w	r2, r2, #3
 800311c:	0092      	lsls	r2, r2, #2
 800311e:	4093      	lsls	r3, r2
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003126:	492f      	ldr	r1, [pc, #188]	; (80031e4 <HAL_GPIO_Init+0x2b0>)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	089b      	lsrs	r3, r3, #2
 800312c:	3302      	adds	r3, #2
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d006      	beq.n	800314e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	492b      	ldr	r1, [pc, #172]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	600b      	str	r3, [r1, #0]
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	43db      	mvns	r3, r3
 8003156:	4927      	ldr	r1, [pc, #156]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003158:	4013      	ands	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d006      	beq.n	8003176 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4921      	ldr	r1, [pc, #132]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	43db      	mvns	r3, r3
 800317e:	491d      	ldr	r1, [pc, #116]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003180:	4013      	ands	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d006      	beq.n	800319e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003190:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	4917      	ldr	r1, [pc, #92]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	4913      	ldr	r1, [pc, #76]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01f      	beq.n	80031f8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	490d      	ldr	r1, [pc, #52]	; (80031f4 <HAL_GPIO_Init+0x2c0>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60cb      	str	r3, [r1, #12]
 80031c4:	e01f      	b.n	8003206 <HAL_GPIO_Init+0x2d2>
 80031c6:	bf00      	nop
 80031c8:	10320000 	.word	0x10320000
 80031cc:	10310000 	.word	0x10310000
 80031d0:	10220000 	.word	0x10220000
 80031d4:	10210000 	.word	0x10210000
 80031d8:	10120000 	.word	0x10120000
 80031dc:	10110000 	.word	0x10110000
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40010800 	.word	0x40010800
 80031ec:	40010c00 	.word	0x40010c00
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_GPIO_Init+0x2f4>)
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	43db      	mvns	r3, r3
 8003200:	4909      	ldr	r1, [pc, #36]	; (8003228 <HAL_GPIO_Init+0x2f4>)
 8003202:	4013      	ands	r3, r2
 8003204:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	3301      	adds	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	f47f ae96 	bne.w	8002f48 <HAL_GPIO_Init+0x14>
  }
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	372c      	adds	r7, #44	; 0x2c
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr
 8003228:	40010400 	.word	0x40010400

0800322c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	807b      	strh	r3, [r7, #2]
 8003238:	4613      	mov	r3, r2
 800323a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800323c:	787b      	ldrb	r3, [r7, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003242:	887a      	ldrh	r2, [r7, #2]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003248:	e003      	b.n	8003252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800324a:	887b      	ldrh	r3, [r7, #2]
 800324c:	041a      	lsls	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	611a      	str	r2, [r3, #16]
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e272      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8087 	beq.w	800338a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800327c:	4b92      	ldr	r3, [pc, #584]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 030c 	and.w	r3, r3, #12
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00c      	beq.n	80032a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003288:	4b8f      	ldr	r3, [pc, #572]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d112      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
 8003294:	4b8c      	ldr	r3, [pc, #560]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d10b      	bne.n	80032ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a2:	4b89      	ldr	r3, [pc, #548]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d06c      	beq.n	8003388 <HAL_RCC_OscConfig+0x12c>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d168      	bne.n	8003388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e24c      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c2:	d106      	bne.n	80032d2 <HAL_RCC_OscConfig+0x76>
 80032c4:	4b80      	ldr	r3, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7f      	ldr	r2, [pc, #508]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e02e      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e01d      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0xbc>
 80032fe:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b6f      	ldr	r3, [pc, #444]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6e      	ldr	r2, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0xd4>
 8003318:	4b6b      	ldr	r3, [pc, #428]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6a      	ldr	r2, [pc, #424]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a67      	ldr	r2, [pc, #412]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d013      	beq.n	8003360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fefe 	bl	8002138 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fefa 	bl	8002138 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e200      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0xe4>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe feea 	bl	8002138 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe fee6 	bl	8002138 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1ec      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x10c>
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d063      	beq.n	800345e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003396:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033a2:	4b49      	ldr	r3, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
 80033ae:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d116      	bne.n	80033e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e1c0      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4939      	ldr	r1, [pc, #228]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e6:	e03a      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_RCC_OscConfig+0x270>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe fe9f 	bl	8002138 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033fe:	f7fe fe9b 	bl	8002138 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e1a1      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4927      	ldr	r1, [pc, #156]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 800342c:	4313      	orrs	r3, r2
 800342e:	600b      	str	r3, [r1, #0]
 8003430:	e015      	b.n	800345e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCC_OscConfig+0x270>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe fe7e 	bl	8002138 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003440:	f7fe fe7a 	bl	8002138 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e180      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03a      	beq.n	80034e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d019      	beq.n	80034a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_RCC_OscConfig+0x274>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fe fe5e 	bl	8002138 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003480:	f7fe fe5a 	bl	8002138 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e160      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <HAL_RCC_OscConfig+0x26c>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f000 fad8 	bl	8003a54 <RCC_Delay>
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a6:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <HAL_RCC_OscConfig+0x274>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fe44 	bl	8002138 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b2:	e00f      	b.n	80034d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fe fe40 	bl	8002138 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d908      	bls.n	80034d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e146      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	42420000 	.word	0x42420000
 80034d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e9      	bne.n	80034b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a6 	beq.w	800363a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f2:	4b8b      	ldr	r3, [pc, #556]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fe:	4b88      	ldr	r3, [pc, #544]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	4a87      	ldr	r2, [pc, #540]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003508:	61d3      	str	r3, [r2, #28]
 800350a:	4b85      	ldr	r3, [pc, #532]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b82      	ldr	r3, [pc, #520]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d118      	bne.n	8003558 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003526:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7e      	ldr	r2, [pc, #504]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003532:	f7fe fe01 	bl	8002138 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fe fdfd 	bl	8002138 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b64      	cmp	r3, #100	; 0x64
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e103      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b75      	ldr	r3, [pc, #468]	; (8003724 <HAL_RCC_OscConfig+0x4c8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x312>
 8003560:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6213      	str	r3, [r2, #32]
 800356c:	e02d      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x334>
 8003576:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	4a69      	ldr	r2, [pc, #420]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6213      	str	r3, [r2, #32]
 8003582:	4b67      	ldr	r3, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a66      	ldr	r2, [pc, #408]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6213      	str	r3, [r2, #32]
 800358e:	e01c      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b05      	cmp	r3, #5
 8003596:	d10c      	bne.n	80035b2 <HAL_RCC_OscConfig+0x356>
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	4a60      	ldr	r2, [pc, #384]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6213      	str	r3, [r2, #32]
 80035a4:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	4a5d      	ldr	r2, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6213      	str	r3, [r2, #32]
 80035b0:	e00b      	b.n	80035ca <HAL_RCC_OscConfig+0x36e>
 80035b2:	4b5b      	ldr	r3, [pc, #364]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4a5a      	ldr	r2, [pc, #360]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	4b58      	ldr	r3, [pc, #352]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	4a57      	ldr	r2, [pc, #348]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fe fdb1 	bl	8002138 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d8:	e00a      	b.n	80035f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035da:	f7fe fdad 	bl	8002138 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0b1      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ee      	beq.n	80035da <HAL_RCC_OscConfig+0x37e>
 80035fc:	e014      	b.n	8003628 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fe:	f7fe fd9b 	bl	8002138 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003604:	e00a      	b.n	800361c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003606:	f7fe fd97 	bl	8002138 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e09b      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362e:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4a3b      	ldr	r2, [pc, #236]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003638:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8087 	beq.w	8003752 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d061      	beq.n	8003714 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d146      	bne.n	80036e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365e:	f7fe fd6b 	bl	8002138 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fe fd67 	bl	8002138 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e06d      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800368e:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	4921      	ldr	r1, [pc, #132]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a19      	ldr	r1, [r3, #32]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	430b      	orrs	r3, r1
 80036b2:	491b      	ldr	r1, [pc, #108]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_RCC_OscConfig+0x4cc>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036be:	f7fe fd3b 	bl	8002138 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fe fd37 	bl	8002138 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e03d      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x46a>
 80036e4:	e035      	b.n	8003752 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_RCC_OscConfig+0x4cc>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ec:	f7fe fd24 	bl	8002138 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe fd20 	bl	8002138 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e026      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x498>
 8003712:	e01e      	b.n	8003752 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d107      	bne.n	800372c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e019      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
 8003720:	40021000 	.word	0x40021000
 8003724:	40007000 	.word	0x40007000
 8003728:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_OscConfig+0x500>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	429a      	cmp	r2, r3
 800373e:	d106      	bne.n	800374e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0d0      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003774:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d910      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	4965      	ldr	r1, [pc, #404]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0b8      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037bc:	4b59      	ldr	r3, [pc, #356]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d4:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a52      	ldr	r2, [pc, #328]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037e0:	4b50      	ldr	r3, [pc, #320]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	494d      	ldr	r1, [pc, #308]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d040      	beq.n	8003880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d115      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e07f      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e073      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e06b      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800383e:	4b39      	ldr	r3, [pc, #228]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f023 0203 	bic.w	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4936      	ldr	r1, [pc, #216]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003850:	f7fe fc72 	bl	8002138 <HAL_GetTick>
 8003854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	e00a      	b.n	800386e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003858:	f7fe fc6e 	bl	8002138 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e053      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 020c 	and.w	r2, r3, #12
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	429a      	cmp	r2, r3
 800387e:	d1eb      	bne.n	8003858 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d210      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	4922      	ldr	r1, [pc, #136]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e032      	b.n	8003916 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	4916      	ldr	r1, [pc, #88]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	490e      	ldr	r1, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038ee:	f000 f821 	bl	8003934 <HAL_RCC_GetSysClockFreq>
 80038f2:	4602      	mov	r2, r0
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_ClockConfig+0x1c4>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	490a      	ldr	r1, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x1c8>)
 8003900:	5ccb      	ldrb	r3, [r1, r3]
 8003902:	fa22 f303 	lsr.w	r3, r2, r3
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <HAL_RCC_ClockConfig+0x1cc>)
 8003908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_ClockConfig+0x1d0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe fbd0 	bl	80020b4 <HAL_InitTick>

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40022000 	.word	0x40022000
 8003924:	40021000 	.word	0x40021000
 8003928:	08006bdc 	.word	0x08006bdc
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004

08003934 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003934:	b490      	push	{r4, r7}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800393c:	1d3c      	adds	r4, r7, #4
 800393e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003944:	f240 2301 	movw	r3, #513	; 0x201
 8003948:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	2300      	movs	r3, #0
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800395e:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d002      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x40>
 800396e:	2b08      	cmp	r3, #8
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x46>
 8003972:	e02b      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003976:	623b      	str	r3, [r7, #32]
      break;
 8003978:	e02b      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	0c9b      	lsrs	r3, r3, #18
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3328      	adds	r3, #40	; 0x28
 8003984:	443b      	add	r3, r7
 8003986:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800398a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d012      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003996:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	0c5b      	lsrs	r3, r3, #17
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	3328      	adds	r3, #40	; 0x28
 80039a2:	443b      	add	r3, r7
 80039a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ae:	fb03 f202 	mul.w	r2, r3, r2
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	e004      	b.n	80039c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4a0b      	ldr	r2, [pc, #44]	; (80039ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	623b      	str	r3, [r7, #32]
      break;
 80039ca:	e002      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ce:	623b      	str	r3, [r7, #32]
      break;
 80039d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039d2:	6a3b      	ldr	r3, [r7, #32]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3728      	adds	r7, #40	; 0x28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc90      	pop	{r4, r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	08006bbc 	.word	0x08006bbc
 80039e4:	40021000 	.word	0x40021000
 80039e8:	007a1200 	.word	0x007a1200
 80039ec:	003d0900 	.word	0x003d0900

080039f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	20000000 	.word	0x20000000

08003a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a08:	f7ff fff2 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0a1b      	lsrs	r3, r3, #8
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08006bec 	.word	0x08006bec

08003a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a30:	f7ff ffde 	bl	80039f0 <HAL_RCC_GetHCLKFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0adb      	lsrs	r3, r3, #11
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	4903      	ldr	r1, [pc, #12]	; (8003a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a42:	5ccb      	ldrb	r3, [r1, r3]
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	08006bec 	.word	0x08006bec

08003a54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <RCC_Delay+0x34>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <RCC_Delay+0x38>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	0a5b      	lsrs	r3, r3, #9
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a70:	bf00      	nop
  }
  while (Delay --);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1e5a      	subs	r2, r3, #1
 8003a76:	60fa      	str	r2, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f9      	bne.n	8003a70 <RCC_Delay+0x1c>
}
 8003a7c:	bf00      	nop
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000000 	.word	0x20000000
 8003a8c:	10624dd3 	.word	0x10624dd3

08003a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d07d      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abc:	4b4c      	ldr	r3, [pc, #304]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	61d3      	str	r3, [r2, #28]
 8003ac8:	4b49      	ldr	r3, [pc, #292]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d118      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003af0:	f7fe fb22 	bl	8002138 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af6:	e008      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af8:	f7fe fb1e 	bl	8002138 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e06d      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	4b3a      	ldr	r3, [pc, #232]	; (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b16:	4b36      	ldr	r3, [pc, #216]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d02e      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d027      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b34:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b3e:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b44:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b4a:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d014      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5a:	f7fe faed 	bl	8002138 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe fae9 	bl	8002138 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e036      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0ee      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b84:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4917      	ldr	r1, [pc, #92]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	490b      	ldr	r1, [pc, #44]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d008      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40007000 	.word	0x40007000
 8003bf8:	42420440 	.word	0x42420440

08003bfc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b08d      	sub	sp, #52	; 0x34
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c04:	4b58      	ldr	r3, [pc, #352]	; (8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003c06:	f107 040c 	add.w	r4, r7, #12
 8003c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c10:	f240 2301 	movw	r3, #513	; 0x201
 8003c14:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	2300      	movs	r3, #0
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	f200 808e 	bhi.w	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d049      	beq.n	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d079      	beq.n	8003d38 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c44:	e086      	b.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003c46:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c4c:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d07f      	beq.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	0c9b      	lsrs	r3, r3, #18
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	3330      	adds	r3, #48	; 0x30
 8003c62:	443b      	add	r3, r7
 8003c64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c68:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d017      	beq.n	8003ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c74:	4b3d      	ldr	r3, [pc, #244]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0c5b      	lsrs	r3, r3, #17
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	3330      	adds	r3, #48	; 0x30
 8003c80:	443b      	add	r3, r7
 8003c82:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c92:	4a37      	ldr	r2, [pc, #220]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca2:	e004      	b.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	4a33      	ldr	r2, [pc, #204]	; (8003d74 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cae:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cba:	d102      	bne.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cc0:	e04a      	b.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4a2c      	ldr	r2, [pc, #176]	; (8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cd0:	e042      	b.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce2:	d108      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf4:	e01f      	b.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d00:	d109      	bne.n	8003d16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003d0e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d14:	e00f      	b.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003d2e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d34:	e012      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003d36:	e011      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d38:	f7ff fe78 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	0b9b      	lsrs	r3, r3, #14
 8003d44:	f003 0303 	and.w	r3, r3, #3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003d52:	e004      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d54:	bf00      	nop
 8003d56:	e002      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d58:	bf00      	nop
 8003d5a:	e000      	b.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003d5c:	bf00      	nop
    }
  }
  return (frequency);
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3734      	adds	r7, #52	; 0x34
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}
 8003d68:	08006bcc 	.word	0x08006bcc
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	007a1200 	.word	0x007a1200
 8003d74:	003d0900 	.word	0x003d0900
 8003d78:	aaaaaaab 	.word	0xaaaaaaab

08003d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e041      	b.n	8003e12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd fefc 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f000 fd22 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e041      	b.n	8003eb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d106      	bne.n	8003e46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f839 	bl	8003eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2202      	movs	r2, #2
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f000 fcd3 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_TIM_PWM_Start+0x24>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e022      	b.n	8003f36 <HAL_TIM_PWM_Start+0x6a>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d109      	bne.n	8003f0a <HAL_TIM_PWM_Start+0x3e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	e015      	b.n	8003f36 <HAL_TIM_PWM_Start+0x6a>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d109      	bne.n	8003f24 <HAL_TIM_PWM_Start+0x58>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e008      	b.n	8003f36 <HAL_TIM_PWM_Start+0x6a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	bf14      	ite	ne
 8003f30:	2301      	movne	r3, #1
 8003f32:	2300      	moveq	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e059      	b.n	8003ff2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d104      	bne.n	8003f4e <HAL_TIM_PWM_Start+0x82>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f4c:	e013      	b.n	8003f76 <HAL_TIM_PWM_Start+0xaa>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_PWM_Start+0x92>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f5c:	e00b      	b.n	8003f76 <HAL_TIM_PWM_Start+0xaa>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_PWM_Start+0xa2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f6c:	e003      	b.n	8003f76 <HAL_TIM_PWM_Start+0xaa>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	6839      	ldr	r1, [r7, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 ffbd 	bl	8004efe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_TIM_PWM_Start+0x130>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d107      	bne.n	8003f9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <HAL_TIM_PWM_Start+0x130>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIM_PWM_Start+0xf0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_PWM_Start+0xf0>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <HAL_TIM_PWM_Start+0x134>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d111      	bne.n	8003fe0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d010      	beq.n	8003ff0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	e007      	b.n	8003ff0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0201 	orr.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40000400 	.word	0x40000400

08004004 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 ff71 	bl	8004efe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <HAL_TIM_PWM_Stop+0xc4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d117      	bne.n	8004056 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a1a      	ldr	r2, [r3, #32]
 800402c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_TIM_PWM_Stop+0x52>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	f240 4344 	movw	r3, #1092	; 0x444
 8004040:	4013      	ands	r3, r2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d107      	bne.n	8004056 <HAL_TIM_PWM_Stop+0x52>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004054:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004060:	4013      	ands	r3, r2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10f      	bne.n	8004086 <HAL_TIM_PWM_Stop+0x82>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a1a      	ldr	r2, [r3, #32]
 800406c:	f240 4344 	movw	r3, #1092	; 0x444
 8004070:	4013      	ands	r3, r2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_TIM_PWM_Stop+0x82>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <HAL_TIM_PWM_Stop+0x92>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	e013      	b.n	80040be <HAL_TIM_PWM_Stop+0xba>
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d104      	bne.n	80040a6 <HAL_TIM_PWM_Stop+0xa2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a4:	e00b      	b.n	80040be <HAL_TIM_PWM_Stop+0xba>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d104      	bne.n	80040b6 <HAL_TIM_PWM_Stop+0xb2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	e003      	b.n	80040be <HAL_TIM_PWM_Stop+0xba>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40012c00 	.word	0x40012c00

080040cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e041      	b.n	8004162 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd fcf4 	bl	8001ae0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	3304      	adds	r3, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4610      	mov	r0, r2
 800410c:	f000 fb7a 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b02      	cmp	r3, #2
 800417e:	d122      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d11b      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0202 	mvn.w	r2, #2
 8004196:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fb0d 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80041b2:	e005      	b.n	80041c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb00 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fb0f 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d122      	bne.n	800421a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d11b      	bne.n	800421a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f06f 0204 	mvn.w	r2, #4
 80041ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fae3 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004206:	e005      	b.n	8004214 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fad6 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fae5 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b08      	cmp	r3, #8
 8004226:	d122      	bne.n	800426e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b08      	cmp	r3, #8
 8004234:	d11b      	bne.n	800426e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f06f 0208 	mvn.w	r2, #8
 800423e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2204      	movs	r2, #4
 8004244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fab9 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 800425a:	e005      	b.n	8004268 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 faac 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fabb 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d122      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	2b10      	cmp	r3, #16
 8004288:	d11b      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f06f 0210 	mvn.w	r2, #16
 8004292:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2208      	movs	r2, #8
 8004298:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa8f 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80042ae:	e005      	b.n	80042bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa82 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fa91 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0201 	mvn.w	r2, #1
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fa5d 	bl	80047a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d10e      	bne.n	800431a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d107      	bne.n	800431a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fe78 	bl	800500a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d10e      	bne.n	8004346 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d107      	bne.n	8004346 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800433e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fa55 	bl	80047f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b20      	cmp	r3, #32
 8004352:	d10e      	bne.n	8004372 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b20      	cmp	r3, #32
 8004360:	d107      	bne.n	8004372 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f06f 0220 	mvn.w	r2, #32
 800436a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fe43 	bl	8004ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004390:	2302      	movs	r3, #2
 8004392:	e082      	b.n	800449a <HAL_TIM_IC_ConfigChannel+0x120>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d11b      	bne.n	80043da <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f000 fc07 	bl	8004bc4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699a      	ldr	r2, [r3, #24]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 020c 	bic.w	r2, r2, #12
 80043c4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6999      	ldr	r1, [r3, #24]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	619a      	str	r2, [r3, #24]
 80043d8:	e05a      	b.n	8004490 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d11c      	bne.n	800441a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6819      	ldr	r1, [r3, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f000 fc6a 	bl	8004cc8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004402:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	021a      	lsls	r2, r3, #8
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	619a      	str	r2, [r3, #24]
 8004418:	e03a      	b.n	8004490 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6819      	ldr	r1, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f000 fcb5 	bl	8004d9e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 020c 	bic.w	r2, r2, #12
 8004442:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69d9      	ldr	r1, [r3, #28]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	61da      	str	r2, [r3, #28]
 8004456:	e01b      	b.n	8004490 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f000 fcd4 	bl	8004e14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800447a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69d9      	ldr	r1, [r3, #28]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	021a      	lsls	r2, r3, #8
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0ac      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x174>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	f200 809f 	bhi.w	800460c <HAL_TIM_PWM_ConfigChannel+0x168>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004509 	.word	0x08004509
 80044d8:	0800460d 	.word	0x0800460d
 80044dc:	0800460d 	.word	0x0800460d
 80044e0:	0800460d 	.word	0x0800460d
 80044e4:	08004549 	.word	0x08004549
 80044e8:	0800460d 	.word	0x0800460d
 80044ec:	0800460d 	.word	0x0800460d
 80044f0:	0800460d 	.word	0x0800460d
 80044f4:	0800458b 	.word	0x0800458b
 80044f8:	0800460d 	.word	0x0800460d
 80044fc:	0800460d 	.word	0x0800460d
 8004500:	0800460d 	.word	0x0800460d
 8004504:	080045cb 	.word	0x080045cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9d0 	bl	80048b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	619a      	str	r2, [r3, #24]
      break;
 8004546:	e062      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fa16 	bl	8004980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6999      	ldr	r1, [r3, #24]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	619a      	str	r2, [r3, #24]
      break;
 8004588:	e041      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fa5f 	bl	8004a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0208 	orr.w	r2, r2, #8
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0204 	bic.w	r2, r2, #4
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
      break;
 80045c8:	e021      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 faa9 	bl	8004b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69d9      	ldr	r1, [r3, #28]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	61da      	str	r2, [r3, #28]
      break;
 800460a:	e000      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800460c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIM_ConfigClockSource+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e0b3      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x180>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d03e      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	f200 8087 	bhi.w	8004788 <HAL_TIM_ConfigClockSource+0x168>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	f000 8085 	beq.w	800478c <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d87f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d01a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xa2>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d87b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004690:	2b60      	cmp	r3, #96	; 0x60
 8004692:	d050      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x116>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d877      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004698:	2b50      	cmp	r3, #80	; 0x50
 800469a:	d03c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xf6>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d873      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d058      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x136>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d86f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a8:	2b30      	cmp	r3, #48	; 0x30
 80046aa:	d064      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d86b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d060      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d867      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d05a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046c0:	e062      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f000 fbf5 	bl	8004ec0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	609a      	str	r2, [r3, #8]
      break;
 80046ee:	e04e      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 fbde 	bl	8004ec0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e03b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 faa2 	bl	8004c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2150      	movs	r1, #80	; 0x50
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fbac 	bl	8004e8c <TIM_ITRx_SetConfig>
      break;
 8004734:	e02b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 fafc 	bl	8004d40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2160      	movs	r1, #96	; 0x60
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fb9c 	bl	8004e8c <TIM_ITRx_SetConfig>
      break;
 8004754:	e01b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 fa82 	bl	8004c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fb8c 	bl	8004e8c <TIM_ITRx_SetConfig>
      break;
 8004774:	e00b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 fb83 	bl	8004e8c <TIM_ITRx_SetConfig>
        break;
 8004786:	e002      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800478c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
	...

08004804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a25      	ldr	r2, [pc, #148]	; (80048ac <TIM_Base_SetConfig+0xa8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d007      	beq.n	800482c <TIM_Base_SetConfig+0x28>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d003      	beq.n	800482c <TIM_Base_SetConfig+0x28>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <TIM_Base_SetConfig+0xac>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <TIM_Base_SetConfig+0xa8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_Base_SetConfig+0x52>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d003      	beq.n	8004856 <TIM_Base_SetConfig+0x52>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <TIM_Base_SetConfig+0xac>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a07      	ldr	r2, [pc, #28]	; (80048ac <TIM_Base_SetConfig+0xa8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d103      	bne.n	800489c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	615a      	str	r2, [r3, #20]
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40000400 	.word	0x40000400

080048b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 0302 	bic.w	r3, r3, #2
 80048fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1c      	ldr	r2, [pc, #112]	; (800497c <TIM_OC1_SetConfig+0xc8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10c      	bne.n	800492a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0308 	bic.w	r3, r3, #8
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <TIM_OC1_SetConfig+0xc8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d111      	bne.n	8004956 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	621a      	str	r2, [r3, #32]
}
 8004970:	bf00      	nop
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00

08004980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	f023 0210 	bic.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0320 	bic.w	r3, r3, #32
 80049ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <TIM_OC2_SetConfig+0xd0>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10d      	bne.n	80049fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a14      	ldr	r2, [pc, #80]	; (8004a50 <TIM_OC2_SetConfig+0xd0>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d113      	bne.n	8004a2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr
 8004a50:	40012c00 	.word	0x40012c00

08004a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a1d      	ldr	r2, [pc, #116]	; (8004b24 <TIM_OC3_SetConfig+0xd0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10d      	bne.n	8004ace <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <TIM_OC3_SetConfig+0xd0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d113      	bne.n	8004afe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00

08004b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	031b      	lsls	r3, r3, #12
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a0f      	ldr	r2, [pc, #60]	; (8004bc0 <TIM_OC4_SetConfig+0x98>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d109      	bne.n	8004b9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr
 8004bc0:	40012c00 	.word	0x40012c00

08004bc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f023 0201 	bic.w	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <TIM_TI1_SetConfig+0xa0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <TIM_TI1_SetConfig+0x3e>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf8:	d003      	beq.n	8004c02 <TIM_TI1_SetConfig+0x3e>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a1a      	ldr	r2, [pc, #104]	; (8004c68 <TIM_TI1_SetConfig+0xa4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <TIM_TI1_SetConfig+0x42>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <TIM_TI1_SetConfig+0x44>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e003      	b.n	8004c26 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f023 030a 	bic.w	r3, r3, #10
 8004c40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f003 030a 	and.w	r3, r3, #10
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400

08004c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 030a 	bic.w	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f023 0210 	bic.w	r2, r3, #16
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	021b      	lsls	r3, r3, #8
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	031b      	lsls	r3, r3, #12
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr

08004d40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f023 0210 	bic.w	r2, r3, #16
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	031b      	lsls	r3, r3, #12
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	621a      	str	r2, [r3, #32]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr

08004d9e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	621a      	str	r2, [r3, #32]
}
 8004e0a:	bf00      	nop
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1b      	ldr	r3, [r3, #32]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	031b      	lsls	r3, r3, #12
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	031b      	lsls	r3, r3, #12
 8004e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f043 0307 	orr.w	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	609a      	str	r2, [r3, #8]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	609a      	str	r2, [r3, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr

08004efe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b087      	sub	sp, #28
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f003 031f 	and.w	r3, r3, #31
 8004f10:	2201      	movs	r2, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	43db      	mvns	r3, r3
 8004f20:	401a      	ands	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	431a      	orrs	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr
	...

08004f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e041      	b.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d004      	beq.n	8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d10c      	bne.n	8004fd2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	40000400 	.word	0x40000400

08004ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr

0800500a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e03f      	b.n	80050ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7fc fe56 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2224      	movs	r2, #36	; 0x24
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800505e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fba9 	bl	80057b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005074:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005084:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005094:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d11d      	bne.n	800510c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_UART_Receive_IT+0x26>
 80050d6:	88fb      	ldrh	r3, [r7, #6]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e016      	b.n	800510e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Receive_IT+0x38>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e00f      	b.n	800510e <HAL_UART_Receive_IT+0x58>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	461a      	mov	r2, r3
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f9cf 	bl	80054a6 <UART_Start_Receive_IT>
 8005108:	4603      	mov	r3, r0
 800510a:	e000      	b.n	800510e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08a      	sub	sp, #40	; 0x28
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005138:	2300      	movs	r3, #0
 800513a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10d      	bne.n	800516a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b00      	cmp	r3, #0
 8005156:	d008      	beq.n	800516a <HAL_UART_IRQHandler+0x52>
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa7f 	bl	8005666 <UART_Receive_IT>
      return;
 8005168:	e17b      	b.n	8005462 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80b1 	beq.w	80052d4 <HAL_UART_IRQHandler+0x1bc>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <HAL_UART_IRQHandler+0x70>
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80a6 	beq.w	80052d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_UART_IRQHandler+0x90>
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_UART_IRQHandler+0xb0>
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0202 	orr.w	r2, r3, #2
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <HAL_UART_IRQHandler+0xd0>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	f043 0204 	orr.w	r2, r3, #4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00f      	beq.n	8005212 <HAL_UART_IRQHandler+0xfa>
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <HAL_UART_IRQHandler+0xee>
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d005      	beq.n	8005212 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f043 0208 	orr.w	r2, r3, #8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 811e 	beq.w	8005458 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_UART_IRQHandler+0x11e>
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fa18 	bl	8005666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_UART_IRQHandler+0x146>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d031      	beq.n	80052c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f95a 	bl	8005518 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d023      	beq.n	80052ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695a      	ldr	r2, [r3, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005280:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	2b00      	cmp	r3, #0
 8005288:	d013      	beq.n	80052b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	4a76      	ldr	r2, [pc, #472]	; (8005468 <HAL_UART_IRQHandler+0x350>)
 8005290:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	4618      	mov	r0, r3
 8005298:	f7fd fdd6 	bl	8002e48 <HAL_DMA_Abort_IT>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	e00e      	b.n	80052d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f8e3 	bl	800547e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	e00a      	b.n	80052d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8df 	bl	800547e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	e006      	b.n	80052d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f8db 	bl	800547e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80052ce:	e0c3      	b.n	8005458 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	bf00      	nop
    return;
 80052d2:	e0c1      	b.n	8005458 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 80a1 	bne.w	8005420 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	f003 0310 	and.w	r3, r3, #16
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 809b 	beq.w	8005420 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f000 8095 	beq.w	8005420 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d04e      	beq.n	80053b8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005324:	8a3b      	ldrh	r3, [r7, #16]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8098 	beq.w	800545c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005330:	8a3a      	ldrh	r2, [r7, #16]
 8005332:	429a      	cmp	r2, r3
 8005334:	f080 8092 	bcs.w	800545c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8a3a      	ldrh	r2, [r7, #16]
 800533c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b20      	cmp	r3, #32
 8005346:	d02b      	beq.n	80053a0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005356:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005376:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68da      	ldr	r2, [r3, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0210 	bic.w	r2, r2, #16
 8005394:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	4618      	mov	r0, r3
 800539c:	f7fd fd19 	bl	8002dd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f86d 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80053b6:	e051      	b.n	800545c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d047      	beq.n	8005460 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80053d0:	8a7b      	ldrh	r3, [r7, #18]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d044      	beq.n	8005460 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80053e4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0201 	bic.w	r2, r2, #1
 80053f4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0210 	bic.w	r2, r2, #16
 8005412:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005414:	8a7b      	ldrh	r3, [r7, #18]
 8005416:	4619      	mov	r1, r3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f839 	bl	8005490 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800541e:	e01f      	b.n	8005460 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b00      	cmp	r3, #0
 8005428:	d008      	beq.n	800543c <HAL_UART_IRQHandler+0x324>
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8af 	bl	8005598 <UART_Transmit_IT>
    return;
 800543a:	e012      	b.n	8005462 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00d      	beq.n	8005462 <HAL_UART_IRQHandler+0x34a>
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f8f0 	bl	8005636 <UART_EndTransmit_IT>
    return;
 8005456:	e004      	b.n	8005462 <HAL_UART_IRQHandler+0x34a>
    return;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <HAL_UART_IRQHandler+0x34a>
      return;
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <HAL_UART_IRQHandler+0x34a>
      return;
 8005460:	bf00      	nop
  }
}
 8005462:	3728      	adds	r7, #40	; 0x28
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	08005571 	.word	0x08005571

0800546c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr

080054a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	4613      	mov	r3, r2
 80054b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2222      	movs	r2, #34	; 0x22
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054ea:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695a      	ldr	r2, [r3, #20]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0220 	orr.w	r2, r2, #32
 800550a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800552e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695a      	ldr	r2, [r3, #20]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	d107      	bne.n	8005558 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0210 	bic.w	r2, r2, #16
 8005556:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff77 	bl	800547e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b21      	cmp	r3, #33	; 0x21
 80055aa:	d13e      	bne.n	800562a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b4:	d114      	bne.n	80055e0 <UART_Transmit_IT+0x48>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d110      	bne.n	80055e0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	621a      	str	r2, [r3, #32]
 80055de:	e008      	b.n	80055f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	1c59      	adds	r1, r3, #1
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6211      	str	r1, [r2, #32]
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	4619      	mov	r1, r3
 8005600:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10f      	bne.n	8005626 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005626:	2300      	movs	r3, #0
 8005628:	e000      	b.n	800562c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
  }
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800564c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff ff08 	bl	800546c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b22      	cmp	r3, #34	; 0x22
 8005678:	f040 8099 	bne.w	80057ae <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d117      	bne.n	80056b6 <UART_Receive_IT+0x50>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d113      	bne.n	80056b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28
 80056b4:	e026      	b.n	8005704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d007      	beq.n	80056da <UART_Receive_IT+0x74>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <UART_Receive_IT+0x82>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e008      	b.n	80056fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005714:	2b00      	cmp	r3, #0
 8005716:	d148      	bne.n	80057aa <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0220 	bic.w	r2, r2, #32
 8005726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0201 	bic.w	r2, r2, #1
 8005746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	2b01      	cmp	r3, #1
 8005756:	d123      	bne.n	80057a0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0210 	bic.w	r2, r2, #16
 800576c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b10      	cmp	r3, #16
 800577a:	d10a      	bne.n	8005792 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fe79 	bl	8005490 <HAL_UARTEx_RxEventCallback>
 800579e:	e002      	b.n	80057a6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7fb f9bd 	bl	8000b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e002      	b.n	80057b0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	e000      	b.n	80057b0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057f2:	f023 030c 	bic.w	r3, r3, #12
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <UART_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d103      	bne.n	8005828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005820:	f7fe f904 	bl	8003a2c <HAL_RCC_GetPCLK2Freq>
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	e002      	b.n	800582e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005828:	f7fe f8ec 	bl	8003a04 <HAL_RCC_GetPCLK1Freq>
 800582c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	4a22      	ldr	r2, [pc, #136]	; (80058d0 <UART_SetConfig+0x118>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	0119      	lsls	r1, r3, #4
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009a      	lsls	r2, r3, #2
 8005858:	441a      	add	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	fbb2 f2f3 	udiv	r2, r2, r3
 8005864:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <UART_SetConfig+0x118>)
 8005866:	fba3 0302 	umull	r0, r3, r3, r2
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2064      	movs	r0, #100	; 0x64
 800586e:	fb00 f303 	mul.w	r3, r0, r3
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	3332      	adds	r3, #50	; 0x32
 8005878:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <UART_SetConfig+0x118>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005884:	4419      	add	r1, r3
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009a      	lsls	r2, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	fbb2 f2f3 	udiv	r2, r2, r3
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <UART_SetConfig+0x118>)
 800589e:	fba3 0302 	umull	r0, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2064      	movs	r0, #100	; 0x64
 80058a6:	fb00 f303 	mul.w	r3, r0, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	3332      	adds	r3, #50	; 0x32
 80058b0:	4a07      	ldr	r2, [pc, #28]	; (80058d0 <UART_SetConfig+0x118>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f003 020f 	and.w	r2, r3, #15
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	440a      	add	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40013800 	.word	0x40013800
 80058d0:	51eb851f 	.word	0x51eb851f

080058d4 <atoi>:
 80058d4:	220a      	movs	r2, #10
 80058d6:	2100      	movs	r1, #0
 80058d8:	f000 b8c2 	b.w	8005a60 <strtol>

080058dc <__errno>:
 80058dc:	4b01      	ldr	r3, [pc, #4]	; (80058e4 <__errno+0x8>)
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	2000000c 	.word	0x2000000c

080058e8 <__libc_init_array>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	2600      	movs	r6, #0
 80058ec:	4d0c      	ldr	r5, [pc, #48]	; (8005920 <__libc_init_array+0x38>)
 80058ee:	4c0d      	ldr	r4, [pc, #52]	; (8005924 <__libc_init_array+0x3c>)
 80058f0:	1b64      	subs	r4, r4, r5
 80058f2:	10a4      	asrs	r4, r4, #2
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	d109      	bne.n	800590c <__libc_init_array+0x24>
 80058f8:	f001 f950 	bl	8006b9c <_init>
 80058fc:	2600      	movs	r6, #0
 80058fe:	4d0a      	ldr	r5, [pc, #40]	; (8005928 <__libc_init_array+0x40>)
 8005900:	4c0a      	ldr	r4, [pc, #40]	; (800592c <__libc_init_array+0x44>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	42a6      	cmp	r6, r4
 8005908:	d105      	bne.n	8005916 <__libc_init_array+0x2e>
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005910:	4798      	blx	r3
 8005912:	3601      	adds	r6, #1
 8005914:	e7ee      	b.n	80058f4 <__libc_init_array+0xc>
 8005916:	f855 3b04 	ldr.w	r3, [r5], #4
 800591a:	4798      	blx	r3
 800591c:	3601      	adds	r6, #1
 800591e:	e7f2      	b.n	8005906 <__libc_init_array+0x1e>
 8005920:	08006d68 	.word	0x08006d68
 8005924:	08006d68 	.word	0x08006d68
 8005928:	08006d68 	.word	0x08006d68
 800592c:	08006d6c 	.word	0x08006d6c

08005930 <memset>:
 8005930:	4603      	mov	r3, r0
 8005932:	4402      	add	r2, r0
 8005934:	4293      	cmp	r3, r2
 8005936:	d100      	bne.n	800593a <memset+0xa>
 8005938:	4770      	bx	lr
 800593a:	f803 1b01 	strb.w	r1, [r3], #1
 800593e:	e7f9      	b.n	8005934 <memset+0x4>

08005940 <strncpy>:
 8005940:	4603      	mov	r3, r0
 8005942:	b510      	push	{r4, lr}
 8005944:	3901      	subs	r1, #1
 8005946:	b132      	cbz	r2, 8005956 <strncpy+0x16>
 8005948:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800594c:	3a01      	subs	r2, #1
 800594e:	f803 4b01 	strb.w	r4, [r3], #1
 8005952:	2c00      	cmp	r4, #0
 8005954:	d1f7      	bne.n	8005946 <strncpy+0x6>
 8005956:	2100      	movs	r1, #0
 8005958:	441a      	add	r2, r3
 800595a:	4293      	cmp	r3, r2
 800595c:	d100      	bne.n	8005960 <strncpy+0x20>
 800595e:	bd10      	pop	{r4, pc}
 8005960:	f803 1b01 	strb.w	r1, [r3], #1
 8005964:	e7f9      	b.n	800595a <strncpy+0x1a>
	...

08005968 <_strtol_l.constprop.0>:
 8005968:	2b01      	cmp	r3, #1
 800596a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596e:	4680      	mov	r8, r0
 8005970:	d001      	beq.n	8005976 <_strtol_l.constprop.0+0xe>
 8005972:	2b24      	cmp	r3, #36	; 0x24
 8005974:	d906      	bls.n	8005984 <_strtol_l.constprop.0+0x1c>
 8005976:	f7ff ffb1 	bl	80058dc <__errno>
 800597a:	2316      	movs	r3, #22
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005984:	460d      	mov	r5, r1
 8005986:	4f35      	ldr	r7, [pc, #212]	; (8005a5c <_strtol_l.constprop.0+0xf4>)
 8005988:	4628      	mov	r0, r5
 800598a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800598e:	5de6      	ldrb	r6, [r4, r7]
 8005990:	f016 0608 	ands.w	r6, r6, #8
 8005994:	d1f8      	bne.n	8005988 <_strtol_l.constprop.0+0x20>
 8005996:	2c2d      	cmp	r4, #45	; 0x2d
 8005998:	d12f      	bne.n	80059fa <_strtol_l.constprop.0+0x92>
 800599a:	2601      	movs	r6, #1
 800599c:	782c      	ldrb	r4, [r5, #0]
 800599e:	1c85      	adds	r5, r0, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d057      	beq.n	8005a54 <_strtol_l.constprop.0+0xec>
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d109      	bne.n	80059bc <_strtol_l.constprop.0+0x54>
 80059a8:	2c30      	cmp	r4, #48	; 0x30
 80059aa:	d107      	bne.n	80059bc <_strtol_l.constprop.0+0x54>
 80059ac:	7828      	ldrb	r0, [r5, #0]
 80059ae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80059b2:	2858      	cmp	r0, #88	; 0x58
 80059b4:	d149      	bne.n	8005a4a <_strtol_l.constprop.0+0xe2>
 80059b6:	2310      	movs	r3, #16
 80059b8:	786c      	ldrb	r4, [r5, #1]
 80059ba:	3502      	adds	r5, #2
 80059bc:	2700      	movs	r7, #0
 80059be:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80059c2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80059c6:	fbbe f9f3 	udiv	r9, lr, r3
 80059ca:	4638      	mov	r0, r7
 80059cc:	fb03 ea19 	mls	sl, r3, r9, lr
 80059d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80059d4:	f1bc 0f09 	cmp.w	ip, #9
 80059d8:	d814      	bhi.n	8005a04 <_strtol_l.constprop.0+0x9c>
 80059da:	4664      	mov	r4, ip
 80059dc:	42a3      	cmp	r3, r4
 80059de:	dd22      	ble.n	8005a26 <_strtol_l.constprop.0+0xbe>
 80059e0:	2f00      	cmp	r7, #0
 80059e2:	db1d      	blt.n	8005a20 <_strtol_l.constprop.0+0xb8>
 80059e4:	4581      	cmp	r9, r0
 80059e6:	d31b      	bcc.n	8005a20 <_strtol_l.constprop.0+0xb8>
 80059e8:	d101      	bne.n	80059ee <_strtol_l.constprop.0+0x86>
 80059ea:	45a2      	cmp	sl, r4
 80059ec:	db18      	blt.n	8005a20 <_strtol_l.constprop.0+0xb8>
 80059ee:	2701      	movs	r7, #1
 80059f0:	fb00 4003 	mla	r0, r0, r3, r4
 80059f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059f8:	e7ea      	b.n	80059d0 <_strtol_l.constprop.0+0x68>
 80059fa:	2c2b      	cmp	r4, #43	; 0x2b
 80059fc:	bf04      	itt	eq
 80059fe:	782c      	ldrbeq	r4, [r5, #0]
 8005a00:	1c85      	addeq	r5, r0, #2
 8005a02:	e7cd      	b.n	80059a0 <_strtol_l.constprop.0+0x38>
 8005a04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005a08:	f1bc 0f19 	cmp.w	ip, #25
 8005a0c:	d801      	bhi.n	8005a12 <_strtol_l.constprop.0+0xaa>
 8005a0e:	3c37      	subs	r4, #55	; 0x37
 8005a10:	e7e4      	b.n	80059dc <_strtol_l.constprop.0+0x74>
 8005a12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005a16:	f1bc 0f19 	cmp.w	ip, #25
 8005a1a:	d804      	bhi.n	8005a26 <_strtol_l.constprop.0+0xbe>
 8005a1c:	3c57      	subs	r4, #87	; 0x57
 8005a1e:	e7dd      	b.n	80059dc <_strtol_l.constprop.0+0x74>
 8005a20:	f04f 37ff 	mov.w	r7, #4294967295
 8005a24:	e7e6      	b.n	80059f4 <_strtol_l.constprop.0+0x8c>
 8005a26:	2f00      	cmp	r7, #0
 8005a28:	da07      	bge.n	8005a3a <_strtol_l.constprop.0+0xd2>
 8005a2a:	2322      	movs	r3, #34	; 0x22
 8005a2c:	4670      	mov	r0, lr
 8005a2e:	f8c8 3000 	str.w	r3, [r8]
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	d0a4      	beq.n	8005980 <_strtol_l.constprop.0+0x18>
 8005a36:	1e69      	subs	r1, r5, #1
 8005a38:	e005      	b.n	8005a46 <_strtol_l.constprop.0+0xde>
 8005a3a:	b106      	cbz	r6, 8005a3e <_strtol_l.constprop.0+0xd6>
 8005a3c:	4240      	negs	r0, r0
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	d09e      	beq.n	8005980 <_strtol_l.constprop.0+0x18>
 8005a42:	2f00      	cmp	r7, #0
 8005a44:	d1f7      	bne.n	8005a36 <_strtol_l.constprop.0+0xce>
 8005a46:	6011      	str	r1, [r2, #0]
 8005a48:	e79a      	b.n	8005980 <_strtol_l.constprop.0+0x18>
 8005a4a:	2430      	movs	r4, #48	; 0x30
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1b5      	bne.n	80059bc <_strtol_l.constprop.0+0x54>
 8005a50:	2308      	movs	r3, #8
 8005a52:	e7b3      	b.n	80059bc <_strtol_l.constprop.0+0x54>
 8005a54:	2c30      	cmp	r4, #48	; 0x30
 8005a56:	d0a9      	beq.n	80059ac <_strtol_l.constprop.0+0x44>
 8005a58:	230a      	movs	r3, #10
 8005a5a:	e7af      	b.n	80059bc <_strtol_l.constprop.0+0x54>
 8005a5c:	08006bf5 	.word	0x08006bf5

08005a60 <strtol>:
 8005a60:	4613      	mov	r3, r2
 8005a62:	460a      	mov	r2, r1
 8005a64:	4601      	mov	r1, r0
 8005a66:	4802      	ldr	r0, [pc, #8]	; (8005a70 <strtol+0x10>)
 8005a68:	6800      	ldr	r0, [r0, #0]
 8005a6a:	f7ff bf7d 	b.w	8005968 <_strtol_l.constprop.0>
 8005a6e:	bf00      	nop
 8005a70:	2000000c 	.word	0x2000000c
 8005a74:	00000000 	.word	0x00000000

08005a78 <atan>:
 8005a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	4bb6      	ldr	r3, [pc, #728]	; (8005d58 <atan+0x2e0>)
 8005a7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005a82:	429e      	cmp	r6, r3
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	468b      	mov	fp, r1
 8005a8a:	dd17      	ble.n	8005abc <atan+0x44>
 8005a8c:	4bb3      	ldr	r3, [pc, #716]	; (8005d5c <atan+0x2e4>)
 8005a8e:	429e      	cmp	r6, r3
 8005a90:	dc01      	bgt.n	8005a96 <atan+0x1e>
 8005a92:	d109      	bne.n	8005aa8 <atan+0x30>
 8005a94:	b140      	cbz	r0, 8005aa8 <atan+0x30>
 8005a96:	4622      	mov	r2, r4
 8005a98:	462b      	mov	r3, r5
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f7fa fb5d 	bl	800015c <__adddf3>
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	e005      	b.n	8005ab4 <atan+0x3c>
 8005aa8:	f1bb 0f00 	cmp.w	fp, #0
 8005aac:	4cac      	ldr	r4, [pc, #688]	; (8005d60 <atan+0x2e8>)
 8005aae:	f300 8121 	bgt.w	8005cf4 <atan+0x27c>
 8005ab2:	4dac      	ldr	r5, [pc, #688]	; (8005d64 <atan+0x2ec>)
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005abc:	4baa      	ldr	r3, [pc, #680]	; (8005d68 <atan+0x2f0>)
 8005abe:	429e      	cmp	r6, r3
 8005ac0:	dc11      	bgt.n	8005ae6 <atan+0x6e>
 8005ac2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005ac6:	429e      	cmp	r6, r3
 8005ac8:	dc0a      	bgt.n	8005ae0 <atan+0x68>
 8005aca:	a38b      	add	r3, pc, #556	; (adr r3, 8005cf8 <atan+0x280>)
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f7fa fb44 	bl	800015c <__adddf3>
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	4ba5      	ldr	r3, [pc, #660]	; (8005d6c <atan+0x2f4>)
 8005ad8:	f7fa ff86 	bl	80009e8 <__aeabi_dcmpgt>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	d1e9      	bne.n	8005ab4 <atan+0x3c>
 8005ae0:	f04f 3aff 	mov.w	sl, #4294967295
 8005ae4:	e027      	b.n	8005b36 <atan+0xbe>
 8005ae6:	f000 f951 	bl	8005d8c <fabs>
 8005aea:	4ba1      	ldr	r3, [pc, #644]	; (8005d70 <atan+0x2f8>)
 8005aec:	4604      	mov	r4, r0
 8005aee:	429e      	cmp	r6, r3
 8005af0:	460d      	mov	r5, r1
 8005af2:	f300 80b8 	bgt.w	8005c66 <atan+0x1ee>
 8005af6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005afa:	429e      	cmp	r6, r3
 8005afc:	f300 809c 	bgt.w	8005c38 <atan+0x1c0>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	f7fa fb2a 	bl	800015c <__adddf3>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	4b98      	ldr	r3, [pc, #608]	; (8005d6c <atan+0x2f4>)
 8005b0c:	f7fa fb24 	bl	8000158 <__aeabi_dsub>
 8005b10:	2200      	movs	r2, #0
 8005b12:	4606      	mov	r6, r0
 8005b14:	460f      	mov	r7, r1
 8005b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	f7fa fb1d 	bl	800015c <__adddf3>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4630      	mov	r0, r6
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa fdf7 	bl	800071c <__aeabi_ddiv>
 8005b2e:	f04f 0a00 	mov.w	sl, #0
 8005b32:	4604      	mov	r4, r0
 8005b34:	460d      	mov	r5, r1
 8005b36:	4622      	mov	r2, r4
 8005b38:	462b      	mov	r3, r5
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f7fa fcc3 	bl	80004c8 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4680      	mov	r8, r0
 8005b48:	4689      	mov	r9, r1
 8005b4a:	f7fa fcbd 	bl	80004c8 <__aeabi_dmul>
 8005b4e:	a36c      	add	r3, pc, #432	; (adr r3, 8005d00 <atan+0x288>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	4606      	mov	r6, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fa fcb6 	bl	80004c8 <__aeabi_dmul>
 8005b5c:	a36a      	add	r3, pc, #424	; (adr r3, 8005d08 <atan+0x290>)
 8005b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b62:	f7fa fafb 	bl	800015c <__adddf3>
 8005b66:	4632      	mov	r2, r6
 8005b68:	463b      	mov	r3, r7
 8005b6a:	f7fa fcad 	bl	80004c8 <__aeabi_dmul>
 8005b6e:	a368      	add	r3, pc, #416	; (adr r3, 8005d10 <atan+0x298>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	f7fa faf2 	bl	800015c <__adddf3>
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	f7fa fca4 	bl	80004c8 <__aeabi_dmul>
 8005b80:	a365      	add	r3, pc, #404	; (adr r3, 8005d18 <atan+0x2a0>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fae9 	bl	800015c <__adddf3>
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	f7fa fc9b 	bl	80004c8 <__aeabi_dmul>
 8005b92:	a363      	add	r3, pc, #396	; (adr r3, 8005d20 <atan+0x2a8>)
 8005b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b98:	f7fa fae0 	bl	800015c <__adddf3>
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	f7fa fc92 	bl	80004c8 <__aeabi_dmul>
 8005ba4:	a360      	add	r3, pc, #384	; (adr r3, 8005d28 <atan+0x2b0>)
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f7fa fad7 	bl	800015c <__adddf3>
 8005bae:	4642      	mov	r2, r8
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	f7fa fc89 	bl	80004c8 <__aeabi_dmul>
 8005bb6:	a35e      	add	r3, pc, #376	; (adr r3, 8005d30 <atan+0x2b8>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	f7fa fc80 	bl	80004c8 <__aeabi_dmul>
 8005bc8:	a35b      	add	r3, pc, #364	; (adr r3, 8005d38 <atan+0x2c0>)
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	f7fa fac3 	bl	8000158 <__aeabi_dsub>
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	f7fa fc77 	bl	80004c8 <__aeabi_dmul>
 8005bda:	a359      	add	r3, pc, #356	; (adr r3, 8005d40 <atan+0x2c8>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f7fa faba 	bl	8000158 <__aeabi_dsub>
 8005be4:	4632      	mov	r2, r6
 8005be6:	463b      	mov	r3, r7
 8005be8:	f7fa fc6e 	bl	80004c8 <__aeabi_dmul>
 8005bec:	a356      	add	r3, pc, #344	; (adr r3, 8005d48 <atan+0x2d0>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fab1 	bl	8000158 <__aeabi_dsub>
 8005bf6:	4632      	mov	r2, r6
 8005bf8:	463b      	mov	r3, r7
 8005bfa:	f7fa fc65 	bl	80004c8 <__aeabi_dmul>
 8005bfe:	a354      	add	r3, pc, #336	; (adr r3, 8005d50 <atan+0x2d8>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f7fa faa8 	bl	8000158 <__aeabi_dsub>
 8005c08:	4632      	mov	r2, r6
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	f7fa fc5c 	bl	80004c8 <__aeabi_dmul>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4640      	mov	r0, r8
 8005c16:	4649      	mov	r1, r9
 8005c18:	f7fa faa0 	bl	800015c <__adddf3>
 8005c1c:	4622      	mov	r2, r4
 8005c1e:	462b      	mov	r3, r5
 8005c20:	f7fa fc52 	bl	80004c8 <__aeabi_dmul>
 8005c24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	d144      	bne.n	8005cb8 <atan+0x240>
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	f7fa fa91 	bl	8000158 <__aeabi_dsub>
 8005c36:	e734      	b.n	8005aa2 <atan+0x2a>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4b4c      	ldr	r3, [pc, #304]	; (8005d6c <atan+0x2f4>)
 8005c3c:	f7fa fa8c 	bl	8000158 <__aeabi_dsub>
 8005c40:	2200      	movs	r2, #0
 8005c42:	4606      	mov	r6, r0
 8005c44:	460f      	mov	r7, r1
 8005c46:	4620      	mov	r0, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4b48      	ldr	r3, [pc, #288]	; (8005d6c <atan+0x2f4>)
 8005c4c:	f7fa fa86 	bl	800015c <__adddf3>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4630      	mov	r0, r6
 8005c56:	4639      	mov	r1, r7
 8005c58:	f7fa fd60 	bl	800071c <__aeabi_ddiv>
 8005c5c:	f04f 0a01 	mov.w	sl, #1
 8005c60:	4604      	mov	r4, r0
 8005c62:	460d      	mov	r5, r1
 8005c64:	e767      	b.n	8005b36 <atan+0xbe>
 8005c66:	4b43      	ldr	r3, [pc, #268]	; (8005d74 <atan+0x2fc>)
 8005c68:	429e      	cmp	r6, r3
 8005c6a:	da1a      	bge.n	8005ca2 <atan+0x22a>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <atan+0x300>)
 8005c70:	f7fa fa72 	bl	8000158 <__aeabi_dsub>
 8005c74:	2200      	movs	r2, #0
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4b3e      	ldr	r3, [pc, #248]	; (8005d78 <atan+0x300>)
 8005c80:	f7fa fc22 	bl	80004c8 <__aeabi_dmul>
 8005c84:	2200      	movs	r2, #0
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <atan+0x2f4>)
 8005c88:	f7fa fa68 	bl	800015c <__adddf3>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4630      	mov	r0, r6
 8005c92:	4639      	mov	r1, r7
 8005c94:	f7fa fd42 	bl	800071c <__aeabi_ddiv>
 8005c98:	f04f 0a02 	mov.w	sl, #2
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	e749      	b.n	8005b36 <atan+0xbe>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	4934      	ldr	r1, [pc, #208]	; (8005d7c <atan+0x304>)
 8005caa:	f7fa fd37 	bl	800071c <__aeabi_ddiv>
 8005cae:	f04f 0a03 	mov.w	sl, #3
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	460d      	mov	r5, r1
 8005cb6:	e73e      	b.n	8005b36 <atan+0xbe>
 8005cb8:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <atan+0x308>)
 8005cba:	4e32      	ldr	r6, [pc, #200]	; (8005d84 <atan+0x30c>)
 8005cbc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005cc0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005cc4:	e9da 2300 	ldrd	r2, r3, [sl]
 8005cc8:	f7fa fa46 	bl	8000158 <__aeabi_dsub>
 8005ccc:	4622      	mov	r2, r4
 8005cce:	462b      	mov	r3, r5
 8005cd0:	f7fa fa42 	bl	8000158 <__aeabi_dsub>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005cdc:	f7fa fa3c 	bl	8000158 <__aeabi_dsub>
 8005ce0:	f1bb 0f00 	cmp.w	fp, #0
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	460d      	mov	r5, r1
 8005ce8:	f6bf aee4 	bge.w	8005ab4 <atan+0x3c>
 8005cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cf0:	461d      	mov	r5, r3
 8005cf2:	e6df      	b.n	8005ab4 <atan+0x3c>
 8005cf4:	4d24      	ldr	r5, [pc, #144]	; (8005d88 <atan+0x310>)
 8005cf6:	e6dd      	b.n	8005ab4 <atan+0x3c>
 8005cf8:	8800759c 	.word	0x8800759c
 8005cfc:	7e37e43c 	.word	0x7e37e43c
 8005d00:	e322da11 	.word	0xe322da11
 8005d04:	3f90ad3a 	.word	0x3f90ad3a
 8005d08:	24760deb 	.word	0x24760deb
 8005d0c:	3fa97b4b 	.word	0x3fa97b4b
 8005d10:	a0d03d51 	.word	0xa0d03d51
 8005d14:	3fb10d66 	.word	0x3fb10d66
 8005d18:	c54c206e 	.word	0xc54c206e
 8005d1c:	3fb745cd 	.word	0x3fb745cd
 8005d20:	920083ff 	.word	0x920083ff
 8005d24:	3fc24924 	.word	0x3fc24924
 8005d28:	5555550d 	.word	0x5555550d
 8005d2c:	3fd55555 	.word	0x3fd55555
 8005d30:	2c6a6c2f 	.word	0x2c6a6c2f
 8005d34:	bfa2b444 	.word	0xbfa2b444
 8005d38:	52defd9a 	.word	0x52defd9a
 8005d3c:	3fadde2d 	.word	0x3fadde2d
 8005d40:	af749a6d 	.word	0xaf749a6d
 8005d44:	3fb3b0f2 	.word	0x3fb3b0f2
 8005d48:	fe231671 	.word	0xfe231671
 8005d4c:	3fbc71c6 	.word	0x3fbc71c6
 8005d50:	9998ebc4 	.word	0x9998ebc4
 8005d54:	3fc99999 	.word	0x3fc99999
 8005d58:	440fffff 	.word	0x440fffff
 8005d5c:	7ff00000 	.word	0x7ff00000
 8005d60:	54442d18 	.word	0x54442d18
 8005d64:	bff921fb 	.word	0xbff921fb
 8005d68:	3fdbffff 	.word	0x3fdbffff
 8005d6c:	3ff00000 	.word	0x3ff00000
 8005d70:	3ff2ffff 	.word	0x3ff2ffff
 8005d74:	40038000 	.word	0x40038000
 8005d78:	3ff80000 	.word	0x3ff80000
 8005d7c:	bff00000 	.word	0xbff00000
 8005d80:	08006d18 	.word	0x08006d18
 8005d84:	08006cf8 	.word	0x08006cf8
 8005d88:	3ff921fb 	.word	0x3ff921fb

08005d8c <fabs>:
 8005d8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005d90:	4770      	bx	lr
	...

08005d94 <pow>:
 8005d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d98:	4614      	mov	r4, r2
 8005d9a:	461d      	mov	r5, r3
 8005d9c:	4680      	mov	r8, r0
 8005d9e:	4689      	mov	r9, r1
 8005da0:	f000 f886 	bl	8005eb0 <__ieee754_pow>
 8005da4:	4622      	mov	r2, r4
 8005da6:	4606      	mov	r6, r0
 8005da8:	460f      	mov	r7, r1
 8005daa:	462b      	mov	r3, r5
 8005dac:	4620      	mov	r0, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7fa fe24 	bl	80009fc <__aeabi_dcmpun>
 8005db4:	bbc8      	cbnz	r0, 8005e2a <pow+0x96>
 8005db6:	2200      	movs	r2, #0
 8005db8:	2300      	movs	r3, #0
 8005dba:	4640      	mov	r0, r8
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	f7fa fdeb 	bl	8000998 <__aeabi_dcmpeq>
 8005dc2:	b1b8      	cbz	r0, 8005df4 <pow+0x60>
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fde4 	bl	8000998 <__aeabi_dcmpeq>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d141      	bne.n	8005e58 <pow+0xc4>
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f000 fe5c 	bl	8006a94 <finite>
 8005ddc:	b328      	cbz	r0, 8005e2a <pow+0x96>
 8005dde:	2200      	movs	r2, #0
 8005de0:	2300      	movs	r3, #0
 8005de2:	4620      	mov	r0, r4
 8005de4:	4629      	mov	r1, r5
 8005de6:	f7fa fde1 	bl	80009ac <__aeabi_dcmplt>
 8005dea:	b1f0      	cbz	r0, 8005e2a <pow+0x96>
 8005dec:	f7ff fd76 	bl	80058dc <__errno>
 8005df0:	2322      	movs	r3, #34	; 0x22
 8005df2:	e019      	b.n	8005e28 <pow+0x94>
 8005df4:	4630      	mov	r0, r6
 8005df6:	4639      	mov	r1, r7
 8005df8:	f000 fe4c 	bl	8006a94 <finite>
 8005dfc:	b9c8      	cbnz	r0, 8005e32 <pow+0x9e>
 8005dfe:	4640      	mov	r0, r8
 8005e00:	4649      	mov	r1, r9
 8005e02:	f000 fe47 	bl	8006a94 <finite>
 8005e06:	b1a0      	cbz	r0, 8005e32 <pow+0x9e>
 8005e08:	4620      	mov	r0, r4
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f000 fe42 	bl	8006a94 <finite>
 8005e10:	b178      	cbz	r0, 8005e32 <pow+0x9e>
 8005e12:	4632      	mov	r2, r6
 8005e14:	463b      	mov	r3, r7
 8005e16:	4630      	mov	r0, r6
 8005e18:	4639      	mov	r1, r7
 8005e1a:	f7fa fdef 	bl	80009fc <__aeabi_dcmpun>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d0e4      	beq.n	8005dec <pow+0x58>
 8005e22:	f7ff fd5b 	bl	80058dc <__errno>
 8005e26:	2321      	movs	r3, #33	; 0x21
 8005e28:	6003      	str	r3, [r0, #0]
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	4630      	mov	r0, r6
 8005e38:	4639      	mov	r1, r7
 8005e3a:	f7fa fdad 	bl	8000998 <__aeabi_dcmpeq>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0f3      	beq.n	8005e2a <pow+0x96>
 8005e42:	4640      	mov	r0, r8
 8005e44:	4649      	mov	r1, r9
 8005e46:	f000 fe25 	bl	8006a94 <finite>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	d0ed      	beq.n	8005e2a <pow+0x96>
 8005e4e:	4620      	mov	r0, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	f000 fe1f 	bl	8006a94 <finite>
 8005e56:	e7c8      	b.n	8005dea <pow+0x56>
 8005e58:	2600      	movs	r6, #0
 8005e5a:	4f01      	ldr	r7, [pc, #4]	; (8005e60 <pow+0xcc>)
 8005e5c:	e7e5      	b.n	8005e2a <pow+0x96>
 8005e5e:	bf00      	nop
 8005e60:	3ff00000 	.word	0x3ff00000

08005e64 <sqrt>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	4606      	mov	r6, r0
 8005e68:	460f      	mov	r7, r1
 8005e6a:	f000 fd37 	bl	80068dc <__ieee754_sqrt>
 8005e6e:	4632      	mov	r2, r6
 8005e70:	4604      	mov	r4, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	463b      	mov	r3, r7
 8005e76:	4630      	mov	r0, r6
 8005e78:	4639      	mov	r1, r7
 8005e7a:	f7fa fdbf 	bl	80009fc <__aeabi_dcmpun>
 8005e7e:	b990      	cbnz	r0, 8005ea6 <sqrt+0x42>
 8005e80:	2200      	movs	r2, #0
 8005e82:	2300      	movs	r3, #0
 8005e84:	4630      	mov	r0, r6
 8005e86:	4639      	mov	r1, r7
 8005e88:	f7fa fd90 	bl	80009ac <__aeabi_dcmplt>
 8005e8c:	b158      	cbz	r0, 8005ea6 <sqrt+0x42>
 8005e8e:	f7ff fd25 	bl	80058dc <__errno>
 8005e92:	2321      	movs	r3, #33	; 0x21
 8005e94:	2200      	movs	r2, #0
 8005e96:	6003      	str	r3, [r0, #0]
 8005e98:	2300      	movs	r3, #0
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f7fa fc3d 	bl	800071c <__aeabi_ddiv>
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	460d      	mov	r5, r1
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eac:	0000      	movs	r0, r0
	...

08005eb0 <__ieee754_pow>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	b093      	sub	sp, #76	; 0x4c
 8005eb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005eba:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005ebe:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005ec2:	4689      	mov	r9, r1
 8005ec4:	ea56 0102 	orrs.w	r1, r6, r2
 8005ec8:	4680      	mov	r8, r0
 8005eca:	d111      	bne.n	8005ef0 <__ieee754_pow+0x40>
 8005ecc:	1803      	adds	r3, r0, r0
 8005ece:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005ed2:	4152      	adcs	r2, r2
 8005ed4:	4299      	cmp	r1, r3
 8005ed6:	4b82      	ldr	r3, [pc, #520]	; (80060e0 <__ieee754_pow+0x230>)
 8005ed8:	4193      	sbcs	r3, r2
 8005eda:	f080 84b9 	bcs.w	8006850 <__ieee754_pow+0x9a0>
 8005ede:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	f7fa f939 	bl	800015c <__adddf3>
 8005eea:	4683      	mov	fp, r0
 8005eec:	468c      	mov	ip, r1
 8005eee:	e06f      	b.n	8005fd0 <__ieee754_pow+0x120>
 8005ef0:	4b7c      	ldr	r3, [pc, #496]	; (80060e4 <__ieee754_pow+0x234>)
 8005ef2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	464d      	mov	r5, r9
 8005efa:	4682      	mov	sl, r0
 8005efc:	dc06      	bgt.n	8005f0c <__ieee754_pow+0x5c>
 8005efe:	d101      	bne.n	8005f04 <__ieee754_pow+0x54>
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d1ec      	bne.n	8005ede <__ieee754_pow+0x2e>
 8005f04:	429e      	cmp	r6, r3
 8005f06:	dc01      	bgt.n	8005f0c <__ieee754_pow+0x5c>
 8005f08:	d10f      	bne.n	8005f2a <__ieee754_pow+0x7a>
 8005f0a:	b172      	cbz	r2, 8005f2a <__ieee754_pow+0x7a>
 8005f0c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005f10:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005f14:	ea55 050a 	orrs.w	r5, r5, sl
 8005f18:	d1e1      	bne.n	8005ede <__ieee754_pow+0x2e>
 8005f1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005f1e:	18db      	adds	r3, r3, r3
 8005f20:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005f24:	4152      	adcs	r2, r2
 8005f26:	429d      	cmp	r5, r3
 8005f28:	e7d5      	b.n	8005ed6 <__ieee754_pow+0x26>
 8005f2a:	2d00      	cmp	r5, #0
 8005f2c:	da39      	bge.n	8005fa2 <__ieee754_pow+0xf2>
 8005f2e:	4b6e      	ldr	r3, [pc, #440]	; (80060e8 <__ieee754_pow+0x238>)
 8005f30:	429e      	cmp	r6, r3
 8005f32:	dc52      	bgt.n	8005fda <__ieee754_pow+0x12a>
 8005f34:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005f38:	429e      	cmp	r6, r3
 8005f3a:	f340 849c 	ble.w	8006876 <__ieee754_pow+0x9c6>
 8005f3e:	1533      	asrs	r3, r6, #20
 8005f40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f44:	2b14      	cmp	r3, #20
 8005f46:	dd0f      	ble.n	8005f68 <__ieee754_pow+0xb8>
 8005f48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005f4c:	fa22 f103 	lsr.w	r1, r2, r3
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	4293      	cmp	r3, r2
 8005f56:	f040 848e 	bne.w	8006876 <__ieee754_pow+0x9c6>
 8005f5a:	f001 0101 	and.w	r1, r1, #1
 8005f5e:	f1c1 0302 	rsb	r3, r1, #2
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	b182      	cbz	r2, 8005f88 <__ieee754_pow+0xd8>
 8005f66:	e05d      	b.n	8006024 <__ieee754_pow+0x174>
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	d159      	bne.n	8006020 <__ieee754_pow+0x170>
 8005f6c:	f1c3 0314 	rsb	r3, r3, #20
 8005f70:	fa46 f103 	asr.w	r1, r6, r3
 8005f74:	fa01 f303 	lsl.w	r3, r1, r3
 8005f78:	42b3      	cmp	r3, r6
 8005f7a:	f040 8479 	bne.w	8006870 <__ieee754_pow+0x9c0>
 8005f7e:	f001 0101 	and.w	r1, r1, #1
 8005f82:	f1c1 0302 	rsb	r3, r1, #2
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	4b58      	ldr	r3, [pc, #352]	; (80060ec <__ieee754_pow+0x23c>)
 8005f8a:	429e      	cmp	r6, r3
 8005f8c:	d132      	bne.n	8005ff4 <__ieee754_pow+0x144>
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	f280 846a 	bge.w	8006868 <__ieee754_pow+0x9b8>
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	2000      	movs	r0, #0
 8005f9a:	4954      	ldr	r1, [pc, #336]	; (80060ec <__ieee754_pow+0x23c>)
 8005f9c:	f7fa fbbe 	bl	800071c <__aeabi_ddiv>
 8005fa0:	e7a3      	b.n	8005eea <__ieee754_pow+0x3a>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	d13c      	bne.n	8006024 <__ieee754_pow+0x174>
 8005faa:	4b4e      	ldr	r3, [pc, #312]	; (80060e4 <__ieee754_pow+0x234>)
 8005fac:	429e      	cmp	r6, r3
 8005fae:	d1eb      	bne.n	8005f88 <__ieee754_pow+0xd8>
 8005fb0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005fb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005fb8:	ea53 030a 	orrs.w	r3, r3, sl
 8005fbc:	f000 8448 	beq.w	8006850 <__ieee754_pow+0x9a0>
 8005fc0:	4b4b      	ldr	r3, [pc, #300]	; (80060f0 <__ieee754_pow+0x240>)
 8005fc2:	429c      	cmp	r4, r3
 8005fc4:	dd0b      	ble.n	8005fde <__ieee754_pow+0x12e>
 8005fc6:	2f00      	cmp	r7, #0
 8005fc8:	f2c0 8448 	blt.w	800685c <__ieee754_pow+0x9ac>
 8005fcc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005fd0:	4658      	mov	r0, fp
 8005fd2:	4661      	mov	r1, ip
 8005fd4:	b013      	add	sp, #76	; 0x4c
 8005fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e7e2      	b.n	8005fa4 <__ieee754_pow+0xf4>
 8005fde:	2f00      	cmp	r7, #0
 8005fe0:	f04f 0b00 	mov.w	fp, #0
 8005fe4:	f04f 0c00 	mov.w	ip, #0
 8005fe8:	daf2      	bge.n	8005fd0 <__ieee754_pow+0x120>
 8005fea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005fee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005ff2:	e7ed      	b.n	8005fd0 <__ieee754_pow+0x120>
 8005ff4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005ff8:	d106      	bne.n	8006008 <__ieee754_pow+0x158>
 8005ffa:	4642      	mov	r2, r8
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa fa61 	bl	80004c8 <__aeabi_dmul>
 8006006:	e770      	b.n	8005eea <__ieee754_pow+0x3a>
 8006008:	4b3a      	ldr	r3, [pc, #232]	; (80060f4 <__ieee754_pow+0x244>)
 800600a:	429f      	cmp	r7, r3
 800600c:	d10a      	bne.n	8006024 <__ieee754_pow+0x174>
 800600e:	2d00      	cmp	r5, #0
 8006010:	db08      	blt.n	8006024 <__ieee754_pow+0x174>
 8006012:	4640      	mov	r0, r8
 8006014:	4649      	mov	r1, r9
 8006016:	b013      	add	sp, #76	; 0x4c
 8006018:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	f000 bc5e 	b.w	80068dc <__ieee754_sqrt>
 8006020:	2300      	movs	r3, #0
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4640      	mov	r0, r8
 8006026:	4649      	mov	r1, r9
 8006028:	f7ff feb0 	bl	8005d8c <fabs>
 800602c:	4683      	mov	fp, r0
 800602e:	468c      	mov	ip, r1
 8006030:	f1ba 0f00 	cmp.w	sl, #0
 8006034:	d128      	bne.n	8006088 <__ieee754_pow+0x1d8>
 8006036:	b124      	cbz	r4, 8006042 <__ieee754_pow+0x192>
 8006038:	4b2c      	ldr	r3, [pc, #176]	; (80060ec <__ieee754_pow+0x23c>)
 800603a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800603e:	429a      	cmp	r2, r3
 8006040:	d122      	bne.n	8006088 <__ieee754_pow+0x1d8>
 8006042:	2f00      	cmp	r7, #0
 8006044:	da07      	bge.n	8006056 <__ieee754_pow+0x1a6>
 8006046:	465a      	mov	r2, fp
 8006048:	4663      	mov	r3, ip
 800604a:	2000      	movs	r0, #0
 800604c:	4927      	ldr	r1, [pc, #156]	; (80060ec <__ieee754_pow+0x23c>)
 800604e:	f7fa fb65 	bl	800071c <__aeabi_ddiv>
 8006052:	4683      	mov	fp, r0
 8006054:	468c      	mov	ip, r1
 8006056:	2d00      	cmp	r5, #0
 8006058:	daba      	bge.n	8005fd0 <__ieee754_pow+0x120>
 800605a:	9b00      	ldr	r3, [sp, #0]
 800605c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006060:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006064:	4323      	orrs	r3, r4
 8006066:	d108      	bne.n	800607a <__ieee754_pow+0x1ca>
 8006068:	465a      	mov	r2, fp
 800606a:	4663      	mov	r3, ip
 800606c:	4658      	mov	r0, fp
 800606e:	4661      	mov	r1, ip
 8006070:	f7fa f872 	bl	8000158 <__aeabi_dsub>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	e790      	b.n	8005f9c <__ieee754_pow+0xec>
 800607a:	9b00      	ldr	r3, [sp, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d1a7      	bne.n	8005fd0 <__ieee754_pow+0x120>
 8006080:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006084:	469c      	mov	ip, r3
 8006086:	e7a3      	b.n	8005fd0 <__ieee754_pow+0x120>
 8006088:	0feb      	lsrs	r3, r5, #31
 800608a:	3b01      	subs	r3, #1
 800608c:	930c      	str	r3, [sp, #48]	; 0x30
 800608e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006090:	9b00      	ldr	r3, [sp, #0]
 8006092:	4313      	orrs	r3, r2
 8006094:	d104      	bne.n	80060a0 <__ieee754_pow+0x1f0>
 8006096:	4642      	mov	r2, r8
 8006098:	464b      	mov	r3, r9
 800609a:	4640      	mov	r0, r8
 800609c:	4649      	mov	r1, r9
 800609e:	e7e7      	b.n	8006070 <__ieee754_pow+0x1c0>
 80060a0:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <__ieee754_pow+0x248>)
 80060a2:	429e      	cmp	r6, r3
 80060a4:	f340 80f6 	ble.w	8006294 <__ieee754_pow+0x3e4>
 80060a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80060ac:	429e      	cmp	r6, r3
 80060ae:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <__ieee754_pow+0x240>)
 80060b0:	dd09      	ble.n	80060c6 <__ieee754_pow+0x216>
 80060b2:	429c      	cmp	r4, r3
 80060b4:	dc0c      	bgt.n	80060d0 <__ieee754_pow+0x220>
 80060b6:	2f00      	cmp	r7, #0
 80060b8:	da0c      	bge.n	80060d4 <__ieee754_pow+0x224>
 80060ba:	2000      	movs	r0, #0
 80060bc:	b013      	add	sp, #76	; 0x4c
 80060be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c2:	f000 bce2 	b.w	8006a8a <__math_oflow>
 80060c6:	429c      	cmp	r4, r3
 80060c8:	dbf5      	blt.n	80060b6 <__ieee754_pow+0x206>
 80060ca:	4b08      	ldr	r3, [pc, #32]	; (80060ec <__ieee754_pow+0x23c>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	dd15      	ble.n	80060fc <__ieee754_pow+0x24c>
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	dcf2      	bgt.n	80060ba <__ieee754_pow+0x20a>
 80060d4:	2000      	movs	r0, #0
 80060d6:	b013      	add	sp, #76	; 0x4c
 80060d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	f000 bcd0 	b.w	8006a80 <__math_uflow>
 80060e0:	fff00000 	.word	0xfff00000
 80060e4:	7ff00000 	.word	0x7ff00000
 80060e8:	433fffff 	.word	0x433fffff
 80060ec:	3ff00000 	.word	0x3ff00000
 80060f0:	3fefffff 	.word	0x3fefffff
 80060f4:	3fe00000 	.word	0x3fe00000
 80060f8:	41e00000 	.word	0x41e00000
 80060fc:	4661      	mov	r1, ip
 80060fe:	2200      	movs	r2, #0
 8006100:	4658      	mov	r0, fp
 8006102:	4b5f      	ldr	r3, [pc, #380]	; (8006280 <__ieee754_pow+0x3d0>)
 8006104:	f7fa f828 	bl	8000158 <__aeabi_dsub>
 8006108:	a355      	add	r3, pc, #340	; (adr r3, 8006260 <__ieee754_pow+0x3b0>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	4604      	mov	r4, r0
 8006110:	460d      	mov	r5, r1
 8006112:	f7fa f9d9 	bl	80004c8 <__aeabi_dmul>
 8006116:	a354      	add	r3, pc, #336	; (adr r3, 8006268 <__ieee754_pow+0x3b8>)
 8006118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611c:	4606      	mov	r6, r0
 800611e:	460f      	mov	r7, r1
 8006120:	4620      	mov	r0, r4
 8006122:	4629      	mov	r1, r5
 8006124:	f7fa f9d0 	bl	80004c8 <__aeabi_dmul>
 8006128:	2200      	movs	r2, #0
 800612a:	4682      	mov	sl, r0
 800612c:	468b      	mov	fp, r1
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	4b54      	ldr	r3, [pc, #336]	; (8006284 <__ieee754_pow+0x3d4>)
 8006134:	f7fa f9c8 	bl	80004c8 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	a14c      	add	r1, pc, #304	; (adr r1, 8006270 <__ieee754_pow+0x3c0>)
 800613e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006142:	f7fa f809 	bl	8000158 <__aeabi_dsub>
 8006146:	4622      	mov	r2, r4
 8006148:	462b      	mov	r3, r5
 800614a:	f7fa f9bd 	bl	80004c8 <__aeabi_dmul>
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	2000      	movs	r0, #0
 8006154:	494c      	ldr	r1, [pc, #304]	; (8006288 <__ieee754_pow+0x3d8>)
 8006156:	f7f9 ffff 	bl	8000158 <__aeabi_dsub>
 800615a:	4622      	mov	r2, r4
 800615c:	462b      	mov	r3, r5
 800615e:	4680      	mov	r8, r0
 8006160:	4689      	mov	r9, r1
 8006162:	4620      	mov	r0, r4
 8006164:	4629      	mov	r1, r5
 8006166:	f7fa f9af 	bl	80004c8 <__aeabi_dmul>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4640      	mov	r0, r8
 8006170:	4649      	mov	r1, r9
 8006172:	f7fa f9a9 	bl	80004c8 <__aeabi_dmul>
 8006176:	a340      	add	r3, pc, #256	; (adr r3, 8006278 <__ieee754_pow+0x3c8>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7fa f9a4 	bl	80004c8 <__aeabi_dmul>
 8006180:	4602      	mov	r2, r0
 8006182:	460b      	mov	r3, r1
 8006184:	4650      	mov	r0, sl
 8006186:	4659      	mov	r1, fp
 8006188:	f7f9 ffe6 	bl	8000158 <__aeabi_dsub>
 800618c:	f04f 0a00 	mov.w	sl, #0
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4604      	mov	r4, r0
 8006196:	460d      	mov	r5, r1
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	f7f9 ffde 	bl	800015c <__adddf3>
 80061a0:	4632      	mov	r2, r6
 80061a2:	463b      	mov	r3, r7
 80061a4:	4650      	mov	r0, sl
 80061a6:	468b      	mov	fp, r1
 80061a8:	f7f9 ffd6 	bl	8000158 <__aeabi_dsub>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4620      	mov	r0, r4
 80061b2:	4629      	mov	r1, r5
 80061b4:	f7f9 ffd0 	bl	8000158 <__aeabi_dsub>
 80061b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061bc:	9b00      	ldr	r3, [sp, #0]
 80061be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c0:	3b01      	subs	r3, #1
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f04f 0600 	mov.w	r6, #0
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	bf0c      	ite	eq
 80061ce:	4b2f      	ldreq	r3, [pc, #188]	; (800628c <__ieee754_pow+0x3dc>)
 80061d0:	4b2b      	ldrne	r3, [pc, #172]	; (8006280 <__ieee754_pow+0x3d0>)
 80061d2:	4604      	mov	r4, r0
 80061d4:	460d      	mov	r5, r1
 80061d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061da:	e9cd 2300 	strd	r2, r3, [sp]
 80061de:	4632      	mov	r2, r6
 80061e0:	463b      	mov	r3, r7
 80061e2:	f7f9 ffb9 	bl	8000158 <__aeabi_dsub>
 80061e6:	4652      	mov	r2, sl
 80061e8:	465b      	mov	r3, fp
 80061ea:	f7fa f96d 	bl	80004c8 <__aeabi_dmul>
 80061ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061f2:	4680      	mov	r8, r0
 80061f4:	4689      	mov	r9, r1
 80061f6:	4620      	mov	r0, r4
 80061f8:	4629      	mov	r1, r5
 80061fa:	f7fa f965 	bl	80004c8 <__aeabi_dmul>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4640      	mov	r0, r8
 8006204:	4649      	mov	r1, r9
 8006206:	f7f9 ffa9 	bl	800015c <__adddf3>
 800620a:	4632      	mov	r2, r6
 800620c:	463b      	mov	r3, r7
 800620e:	4680      	mov	r8, r0
 8006210:	4689      	mov	r9, r1
 8006212:	4650      	mov	r0, sl
 8006214:	4659      	mov	r1, fp
 8006216:	f7fa f957 	bl	80004c8 <__aeabi_dmul>
 800621a:	4604      	mov	r4, r0
 800621c:	460d      	mov	r5, r1
 800621e:	460b      	mov	r3, r1
 8006220:	4602      	mov	r2, r0
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800622a:	f7f9 ff97 	bl	800015c <__adddf3>
 800622e:	4b18      	ldr	r3, [pc, #96]	; (8006290 <__ieee754_pow+0x3e0>)
 8006230:	4682      	mov	sl, r0
 8006232:	4299      	cmp	r1, r3
 8006234:	460f      	mov	r7, r1
 8006236:	460e      	mov	r6, r1
 8006238:	f340 82e5 	ble.w	8006806 <__ieee754_pow+0x956>
 800623c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006240:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006244:	4303      	orrs	r3, r0
 8006246:	f000 81df 	beq.w	8006608 <__ieee754_pow+0x758>
 800624a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800624e:	2200      	movs	r2, #0
 8006250:	2300      	movs	r3, #0
 8006252:	f7fa fbab 	bl	80009ac <__aeabi_dcmplt>
 8006256:	3800      	subs	r0, #0
 8006258:	bf18      	it	ne
 800625a:	2001      	movne	r0, #1
 800625c:	e72e      	b.n	80060bc <__ieee754_pow+0x20c>
 800625e:	bf00      	nop
 8006260:	60000000 	.word	0x60000000
 8006264:	3ff71547 	.word	0x3ff71547
 8006268:	f85ddf44 	.word	0xf85ddf44
 800626c:	3e54ae0b 	.word	0x3e54ae0b
 8006270:	55555555 	.word	0x55555555
 8006274:	3fd55555 	.word	0x3fd55555
 8006278:	652b82fe 	.word	0x652b82fe
 800627c:	3ff71547 	.word	0x3ff71547
 8006280:	3ff00000 	.word	0x3ff00000
 8006284:	3fd00000 	.word	0x3fd00000
 8006288:	3fe00000 	.word	0x3fe00000
 800628c:	bff00000 	.word	0xbff00000
 8006290:	408fffff 	.word	0x408fffff
 8006294:	4bd2      	ldr	r3, [pc, #840]	; (80065e0 <__ieee754_pow+0x730>)
 8006296:	2200      	movs	r2, #0
 8006298:	402b      	ands	r3, r5
 800629a:	b943      	cbnz	r3, 80062ae <__ieee754_pow+0x3fe>
 800629c:	4658      	mov	r0, fp
 800629e:	4661      	mov	r1, ip
 80062a0:	4bd0      	ldr	r3, [pc, #832]	; (80065e4 <__ieee754_pow+0x734>)
 80062a2:	f7fa f911 	bl	80004c8 <__aeabi_dmul>
 80062a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80062aa:	4683      	mov	fp, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	1523      	asrs	r3, r4, #20
 80062b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80062b4:	4413      	add	r3, r2
 80062b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062b8:	4bcb      	ldr	r3, [pc, #812]	; (80065e8 <__ieee754_pow+0x738>)
 80062ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80062be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80062c2:	429c      	cmp	r4, r3
 80062c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80062c8:	dd08      	ble.n	80062dc <__ieee754_pow+0x42c>
 80062ca:	4bc8      	ldr	r3, [pc, #800]	; (80065ec <__ieee754_pow+0x73c>)
 80062cc:	429c      	cmp	r4, r3
 80062ce:	f340 8199 	ble.w	8006604 <__ieee754_pow+0x754>
 80062d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80062d8:	3301      	adds	r3, #1
 80062da:	930b      	str	r3, [sp, #44]	; 0x2c
 80062dc:	2600      	movs	r6, #0
 80062de:	00f3      	lsls	r3, r6, #3
 80062e0:	930d      	str	r3, [sp, #52]	; 0x34
 80062e2:	4bc3      	ldr	r3, [pc, #780]	; (80065f0 <__ieee754_pow+0x740>)
 80062e4:	4658      	mov	r0, fp
 80062e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062ee:	4629      	mov	r1, r5
 80062f0:	461a      	mov	r2, r3
 80062f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80062f6:	4623      	mov	r3, r4
 80062f8:	f7f9 ff2e 	bl	8000158 <__aeabi_dsub>
 80062fc:	46da      	mov	sl, fp
 80062fe:	462b      	mov	r3, r5
 8006300:	4652      	mov	r2, sl
 8006302:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006306:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800630a:	f7f9 ff27 	bl	800015c <__adddf3>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	2000      	movs	r0, #0
 8006314:	49b7      	ldr	r1, [pc, #732]	; (80065f4 <__ieee754_pow+0x744>)
 8006316:	f7fa fa01 	bl	800071c <__aeabi_ddiv>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006322:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006326:	f7fa f8cf 	bl	80004c8 <__aeabi_dmul>
 800632a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800632e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006332:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006336:	2300      	movs	r3, #0
 8006338:	2200      	movs	r2, #0
 800633a:	46ab      	mov	fp, r5
 800633c:	106d      	asrs	r5, r5, #1
 800633e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006342:	9304      	str	r3, [sp, #16]
 8006344:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006348:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800634c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	4614      	mov	r4, r2
 8006356:	461d      	mov	r5, r3
 8006358:	f7fa f8b6 	bl	80004c8 <__aeabi_dmul>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006364:	f7f9 fef8 	bl	8000158 <__aeabi_dsub>
 8006368:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800636c:	4606      	mov	r6, r0
 800636e:	460f      	mov	r7, r1
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7f9 fef0 	bl	8000158 <__aeabi_dsub>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4650      	mov	r0, sl
 800637e:	4659      	mov	r1, fp
 8006380:	f7f9 feea 	bl	8000158 <__aeabi_dsub>
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	f7fa f89e 	bl	80004c8 <__aeabi_dmul>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4630      	mov	r0, r6
 8006392:	4639      	mov	r1, r7
 8006394:	f7f9 fee0 	bl	8000158 <__aeabi_dsub>
 8006398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800639c:	f7fa f894 	bl	80004c8 <__aeabi_dmul>
 80063a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	f7fa f88c 	bl	80004c8 <__aeabi_dmul>
 80063b0:	a379      	add	r3, pc, #484	; (adr r3, 8006598 <__ieee754_pow+0x6e8>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	4604      	mov	r4, r0
 80063b8:	460d      	mov	r5, r1
 80063ba:	f7fa f885 	bl	80004c8 <__aeabi_dmul>
 80063be:	a378      	add	r3, pc, #480	; (adr r3, 80065a0 <__ieee754_pow+0x6f0>)
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f7f9 feca 	bl	800015c <__adddf3>
 80063c8:	4622      	mov	r2, r4
 80063ca:	462b      	mov	r3, r5
 80063cc:	f7fa f87c 	bl	80004c8 <__aeabi_dmul>
 80063d0:	a375      	add	r3, pc, #468	; (adr r3, 80065a8 <__ieee754_pow+0x6f8>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	f7f9 fec1 	bl	800015c <__adddf3>
 80063da:	4622      	mov	r2, r4
 80063dc:	462b      	mov	r3, r5
 80063de:	f7fa f873 	bl	80004c8 <__aeabi_dmul>
 80063e2:	a373      	add	r3, pc, #460	; (adr r3, 80065b0 <__ieee754_pow+0x700>)
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f7f9 feb8 	bl	800015c <__adddf3>
 80063ec:	4622      	mov	r2, r4
 80063ee:	462b      	mov	r3, r5
 80063f0:	f7fa f86a 	bl	80004c8 <__aeabi_dmul>
 80063f4:	a370      	add	r3, pc, #448	; (adr r3, 80065b8 <__ieee754_pow+0x708>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7f9 feaf 	bl	800015c <__adddf3>
 80063fe:	4622      	mov	r2, r4
 8006400:	462b      	mov	r3, r5
 8006402:	f7fa f861 	bl	80004c8 <__aeabi_dmul>
 8006406:	a36e      	add	r3, pc, #440	; (adr r3, 80065c0 <__ieee754_pow+0x710>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7f9 fea6 	bl	800015c <__adddf3>
 8006410:	4622      	mov	r2, r4
 8006412:	4606      	mov	r6, r0
 8006414:	460f      	mov	r7, r1
 8006416:	462b      	mov	r3, r5
 8006418:	4620      	mov	r0, r4
 800641a:	4629      	mov	r1, r5
 800641c:	f7fa f854 	bl	80004c8 <__aeabi_dmul>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7fa f84e 	bl	80004c8 <__aeabi_dmul>
 800642c:	4604      	mov	r4, r0
 800642e:	460d      	mov	r5, r1
 8006430:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	f7f9 fe90 	bl	800015c <__adddf3>
 800643c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006440:	f7fa f842 	bl	80004c8 <__aeabi_dmul>
 8006444:	4622      	mov	r2, r4
 8006446:	462b      	mov	r3, r5
 8006448:	f7f9 fe88 	bl	800015c <__adddf3>
 800644c:	4642      	mov	r2, r8
 800644e:	4606      	mov	r6, r0
 8006450:	460f      	mov	r7, r1
 8006452:	464b      	mov	r3, r9
 8006454:	4640      	mov	r0, r8
 8006456:	4649      	mov	r1, r9
 8006458:	f7fa f836 	bl	80004c8 <__aeabi_dmul>
 800645c:	2200      	movs	r2, #0
 800645e:	4b66      	ldr	r3, [pc, #408]	; (80065f8 <__ieee754_pow+0x748>)
 8006460:	4682      	mov	sl, r0
 8006462:	468b      	mov	fp, r1
 8006464:	f7f9 fe7a 	bl	800015c <__adddf3>
 8006468:	4632      	mov	r2, r6
 800646a:	463b      	mov	r3, r7
 800646c:	f7f9 fe76 	bl	800015c <__adddf3>
 8006470:	2400      	movs	r4, #0
 8006472:	460d      	mov	r5, r1
 8006474:	4622      	mov	r2, r4
 8006476:	460b      	mov	r3, r1
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa f824 	bl	80004c8 <__aeabi_dmul>
 8006480:	2200      	movs	r2, #0
 8006482:	4680      	mov	r8, r0
 8006484:	4689      	mov	r9, r1
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4b5b      	ldr	r3, [pc, #364]	; (80065f8 <__ieee754_pow+0x748>)
 800648c:	f7f9 fe64 	bl	8000158 <__aeabi_dsub>
 8006490:	4652      	mov	r2, sl
 8006492:	465b      	mov	r3, fp
 8006494:	f7f9 fe60 	bl	8000158 <__aeabi_dsub>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4630      	mov	r0, r6
 800649e:	4639      	mov	r1, r7
 80064a0:	f7f9 fe5a 	bl	8000158 <__aeabi_dsub>
 80064a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a8:	f7fa f80e 	bl	80004c8 <__aeabi_dmul>
 80064ac:	4622      	mov	r2, r4
 80064ae:	4606      	mov	r6, r0
 80064b0:	460f      	mov	r7, r1
 80064b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064b6:	462b      	mov	r3, r5
 80064b8:	f7fa f806 	bl	80004c8 <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4630      	mov	r0, r6
 80064c2:	4639      	mov	r1, r7
 80064c4:	f7f9 fe4a 	bl	800015c <__adddf3>
 80064c8:	2400      	movs	r4, #0
 80064ca:	4606      	mov	r6, r0
 80064cc:	460f      	mov	r7, r1
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4640      	mov	r0, r8
 80064d4:	4649      	mov	r1, r9
 80064d6:	f7f9 fe41 	bl	800015c <__adddf3>
 80064da:	a33b      	add	r3, pc, #236	; (adr r3, 80065c8 <__ieee754_pow+0x718>)
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	4620      	mov	r0, r4
 80064e2:	460d      	mov	r5, r1
 80064e4:	f7f9 fff0 	bl	80004c8 <__aeabi_dmul>
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064f0:	4620      	mov	r0, r4
 80064f2:	4629      	mov	r1, r5
 80064f4:	f7f9 fe30 	bl	8000158 <__aeabi_dsub>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7f9 fe2a 	bl	8000158 <__aeabi_dsub>
 8006504:	a332      	add	r3, pc, #200	; (adr r3, 80065d0 <__ieee754_pow+0x720>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f7f9 ffdd 	bl	80004c8 <__aeabi_dmul>
 800650e:	a332      	add	r3, pc, #200	; (adr r3, 80065d8 <__ieee754_pow+0x728>)
 8006510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006514:	4606      	mov	r6, r0
 8006516:	460f      	mov	r7, r1
 8006518:	4620      	mov	r0, r4
 800651a:	4629      	mov	r1, r5
 800651c:	f7f9 ffd4 	bl	80004c8 <__aeabi_dmul>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	4630      	mov	r0, r6
 8006526:	4639      	mov	r1, r7
 8006528:	f7f9 fe18 	bl	800015c <__adddf3>
 800652c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800652e:	4b33      	ldr	r3, [pc, #204]	; (80065fc <__ieee754_pow+0x74c>)
 8006530:	f04f 0a00 	mov.w	sl, #0
 8006534:	4413      	add	r3, r2
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 fe0f 	bl	800015c <__adddf3>
 800653e:	4680      	mov	r8, r0
 8006540:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006542:	4689      	mov	r9, r1
 8006544:	f7f9 ff56 	bl	80003f4 <__aeabi_i2d>
 8006548:	4604      	mov	r4, r0
 800654a:	460d      	mov	r5, r1
 800654c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800654e:	4b2c      	ldr	r3, [pc, #176]	; (8006600 <__ieee754_pow+0x750>)
 8006550:	4413      	add	r3, r2
 8006552:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006556:	4642      	mov	r2, r8
 8006558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800655c:	464b      	mov	r3, r9
 800655e:	f7f9 fdfd 	bl	800015c <__adddf3>
 8006562:	4632      	mov	r2, r6
 8006564:	463b      	mov	r3, r7
 8006566:	f7f9 fdf9 	bl	800015c <__adddf3>
 800656a:	4622      	mov	r2, r4
 800656c:	462b      	mov	r3, r5
 800656e:	f7f9 fdf5 	bl	800015c <__adddf3>
 8006572:	4622      	mov	r2, r4
 8006574:	462b      	mov	r3, r5
 8006576:	4650      	mov	r0, sl
 8006578:	468b      	mov	fp, r1
 800657a:	f7f9 fded 	bl	8000158 <__aeabi_dsub>
 800657e:	4632      	mov	r2, r6
 8006580:	463b      	mov	r3, r7
 8006582:	f7f9 fde9 	bl	8000158 <__aeabi_dsub>
 8006586:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800658a:	f7f9 fde5 	bl	8000158 <__aeabi_dsub>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4640      	mov	r0, r8
 8006594:	4649      	mov	r1, r9
 8006596:	e60d      	b.n	80061b4 <__ieee754_pow+0x304>
 8006598:	4a454eef 	.word	0x4a454eef
 800659c:	3fca7e28 	.word	0x3fca7e28
 80065a0:	93c9db65 	.word	0x93c9db65
 80065a4:	3fcd864a 	.word	0x3fcd864a
 80065a8:	a91d4101 	.word	0xa91d4101
 80065ac:	3fd17460 	.word	0x3fd17460
 80065b0:	518f264d 	.word	0x518f264d
 80065b4:	3fd55555 	.word	0x3fd55555
 80065b8:	db6fabff 	.word	0xdb6fabff
 80065bc:	3fdb6db6 	.word	0x3fdb6db6
 80065c0:	33333303 	.word	0x33333303
 80065c4:	3fe33333 	.word	0x3fe33333
 80065c8:	e0000000 	.word	0xe0000000
 80065cc:	3feec709 	.word	0x3feec709
 80065d0:	dc3a03fd 	.word	0xdc3a03fd
 80065d4:	3feec709 	.word	0x3feec709
 80065d8:	145b01f5 	.word	0x145b01f5
 80065dc:	be3e2fe0 	.word	0xbe3e2fe0
 80065e0:	7ff00000 	.word	0x7ff00000
 80065e4:	43400000 	.word	0x43400000
 80065e8:	0003988e 	.word	0x0003988e
 80065ec:	000bb679 	.word	0x000bb679
 80065f0:	08006d38 	.word	0x08006d38
 80065f4:	3ff00000 	.word	0x3ff00000
 80065f8:	40080000 	.word	0x40080000
 80065fc:	08006d58 	.word	0x08006d58
 8006600:	08006d48 	.word	0x08006d48
 8006604:	2601      	movs	r6, #1
 8006606:	e66a      	b.n	80062de <__ieee754_pow+0x42e>
 8006608:	a39d      	add	r3, pc, #628	; (adr r3, 8006880 <__ieee754_pow+0x9d0>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7f9 fda3 	bl	800015c <__adddf3>
 8006616:	4622      	mov	r2, r4
 8006618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800661c:	462b      	mov	r3, r5
 800661e:	4650      	mov	r0, sl
 8006620:	4639      	mov	r1, r7
 8006622:	f7f9 fd99 	bl	8000158 <__aeabi_dsub>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800662e:	f7fa f9db 	bl	80009e8 <__aeabi_dcmpgt>
 8006632:	2800      	cmp	r0, #0
 8006634:	f47f ae09 	bne.w	800624a <__ieee754_pow+0x39a>
 8006638:	4aa3      	ldr	r2, [pc, #652]	; (80068c8 <__ieee754_pow+0xa18>)
 800663a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800663e:	4293      	cmp	r3, r2
 8006640:	f340 8101 	ble.w	8006846 <__ieee754_pow+0x996>
 8006644:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006648:	2000      	movs	r0, #0
 800664a:	151b      	asrs	r3, r3, #20
 800664c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006650:	fa4a f303 	asr.w	r3, sl, r3
 8006654:	4433      	add	r3, r6
 8006656:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800665a:	4f9c      	ldr	r7, [pc, #624]	; (80068cc <__ieee754_pow+0xa1c>)
 800665c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006660:	4117      	asrs	r7, r2
 8006662:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006666:	ea23 0107 	bic.w	r1, r3, r7
 800666a:	f1c2 0214 	rsb	r2, r2, #20
 800666e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006672:	460b      	mov	r3, r1
 8006674:	fa4a fa02 	asr.w	sl, sl, r2
 8006678:	2e00      	cmp	r6, #0
 800667a:	4602      	mov	r2, r0
 800667c:	4629      	mov	r1, r5
 800667e:	4620      	mov	r0, r4
 8006680:	bfb8      	it	lt
 8006682:	f1ca 0a00 	rsblt	sl, sl, #0
 8006686:	f7f9 fd67 	bl	8000158 <__aeabi_dsub>
 800668a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800668e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006692:	2400      	movs	r4, #0
 8006694:	4642      	mov	r2, r8
 8006696:	464b      	mov	r3, r9
 8006698:	f7f9 fd60 	bl	800015c <__adddf3>
 800669c:	a37a      	add	r3, pc, #488	; (adr r3, 8006888 <__ieee754_pow+0x9d8>)
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	4620      	mov	r0, r4
 80066a4:	460d      	mov	r5, r1
 80066a6:	f7f9 ff0f 	bl	80004c8 <__aeabi_dmul>
 80066aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066ae:	4606      	mov	r6, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	4620      	mov	r0, r4
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7f9 fd4f 	bl	8000158 <__aeabi_dsub>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4640      	mov	r0, r8
 80066c0:	4649      	mov	r1, r9
 80066c2:	f7f9 fd49 	bl	8000158 <__aeabi_dsub>
 80066c6:	a372      	add	r3, pc, #456	; (adr r3, 8006890 <__ieee754_pow+0x9e0>)
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f7f9 fefc 	bl	80004c8 <__aeabi_dmul>
 80066d0:	a371      	add	r3, pc, #452	; (adr r3, 8006898 <__ieee754_pow+0x9e8>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	4680      	mov	r8, r0
 80066d8:	4689      	mov	r9, r1
 80066da:	4620      	mov	r0, r4
 80066dc:	4629      	mov	r1, r5
 80066de:	f7f9 fef3 	bl	80004c8 <__aeabi_dmul>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4640      	mov	r0, r8
 80066e8:	4649      	mov	r1, r9
 80066ea:	f7f9 fd37 	bl	800015c <__adddf3>
 80066ee:	4604      	mov	r4, r0
 80066f0:	460d      	mov	r5, r1
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4630      	mov	r0, r6
 80066f8:	4639      	mov	r1, r7
 80066fa:	f7f9 fd2f 	bl	800015c <__adddf3>
 80066fe:	4632      	mov	r2, r6
 8006700:	463b      	mov	r3, r7
 8006702:	4680      	mov	r8, r0
 8006704:	4689      	mov	r9, r1
 8006706:	f7f9 fd27 	bl	8000158 <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4620      	mov	r0, r4
 8006710:	4629      	mov	r1, r5
 8006712:	f7f9 fd21 	bl	8000158 <__aeabi_dsub>
 8006716:	4642      	mov	r2, r8
 8006718:	4606      	mov	r6, r0
 800671a:	460f      	mov	r7, r1
 800671c:	464b      	mov	r3, r9
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 fed1 	bl	80004c8 <__aeabi_dmul>
 8006726:	a35e      	add	r3, pc, #376	; (adr r3, 80068a0 <__ieee754_pow+0x9f0>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	4604      	mov	r4, r0
 800672e:	460d      	mov	r5, r1
 8006730:	f7f9 feca 	bl	80004c8 <__aeabi_dmul>
 8006734:	a35c      	add	r3, pc, #368	; (adr r3, 80068a8 <__ieee754_pow+0x9f8>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fd0d 	bl	8000158 <__aeabi_dsub>
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f7f9 fec1 	bl	80004c8 <__aeabi_dmul>
 8006746:	a35a      	add	r3, pc, #360	; (adr r3, 80068b0 <__ieee754_pow+0xa00>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd06 	bl	800015c <__adddf3>
 8006750:	4622      	mov	r2, r4
 8006752:	462b      	mov	r3, r5
 8006754:	f7f9 feb8 	bl	80004c8 <__aeabi_dmul>
 8006758:	a357      	add	r3, pc, #348	; (adr r3, 80068b8 <__ieee754_pow+0xa08>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fcfb 	bl	8000158 <__aeabi_dsub>
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	f7f9 feaf 	bl	80004c8 <__aeabi_dmul>
 800676a:	a355      	add	r3, pc, #340	; (adr r3, 80068c0 <__ieee754_pow+0xa10>)
 800676c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006770:	f7f9 fcf4 	bl	800015c <__adddf3>
 8006774:	4622      	mov	r2, r4
 8006776:	462b      	mov	r3, r5
 8006778:	f7f9 fea6 	bl	80004c8 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7f9 fce8 	bl	8000158 <__aeabi_dsub>
 8006788:	4604      	mov	r4, r0
 800678a:	460d      	mov	r5, r1
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4640      	mov	r0, r8
 8006792:	4649      	mov	r1, r9
 8006794:	f7f9 fe98 	bl	80004c8 <__aeabi_dmul>
 8006798:	2200      	movs	r2, #0
 800679a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7f9 fcd7 	bl	8000158 <__aeabi_dsub>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b2:	f7f9 ffb3 	bl	800071c <__aeabi_ddiv>
 80067b6:	4632      	mov	r2, r6
 80067b8:	4604      	mov	r4, r0
 80067ba:	460d      	mov	r5, r1
 80067bc:	463b      	mov	r3, r7
 80067be:	4640      	mov	r0, r8
 80067c0:	4649      	mov	r1, r9
 80067c2:	f7f9 fe81 	bl	80004c8 <__aeabi_dmul>
 80067c6:	4632      	mov	r2, r6
 80067c8:	463b      	mov	r3, r7
 80067ca:	f7f9 fcc7 	bl	800015c <__adddf3>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4620      	mov	r0, r4
 80067d4:	4629      	mov	r1, r5
 80067d6:	f7f9 fcbf 	bl	8000158 <__aeabi_dsub>
 80067da:	4642      	mov	r2, r8
 80067dc:	464b      	mov	r3, r9
 80067de:	f7f9 fcbb 	bl	8000158 <__aeabi_dsub>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	2000      	movs	r0, #0
 80067e8:	4939      	ldr	r1, [pc, #228]	; (80068d0 <__ieee754_pow+0xa20>)
 80067ea:	f7f9 fcb5 	bl	8000158 <__aeabi_dsub>
 80067ee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80067f2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80067f6:	da29      	bge.n	800684c <__ieee754_pow+0x99c>
 80067f8:	4652      	mov	r2, sl
 80067fa:	f000 f951 	bl	8006aa0 <scalbn>
 80067fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006802:	f7ff bbfe 	b.w	8006002 <__ieee754_pow+0x152>
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <__ieee754_pow+0xa24>)
 8006808:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800680c:	429f      	cmp	r7, r3
 800680e:	f77f af13 	ble.w	8006638 <__ieee754_pow+0x788>
 8006812:	4b31      	ldr	r3, [pc, #196]	; (80068d8 <__ieee754_pow+0xa28>)
 8006814:	440b      	add	r3, r1
 8006816:	4303      	orrs	r3, r0
 8006818:	d009      	beq.n	800682e <__ieee754_pow+0x97e>
 800681a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	f7fa f8c3 	bl	80009ac <__aeabi_dcmplt>
 8006826:	3800      	subs	r0, #0
 8006828:	bf18      	it	ne
 800682a:	2001      	movne	r0, #1
 800682c:	e453      	b.n	80060d6 <__ieee754_pow+0x226>
 800682e:	4622      	mov	r2, r4
 8006830:	462b      	mov	r3, r5
 8006832:	f7f9 fc91 	bl	8000158 <__aeabi_dsub>
 8006836:	4642      	mov	r2, r8
 8006838:	464b      	mov	r3, r9
 800683a:	f7fa f8cb 	bl	80009d4 <__aeabi_dcmpge>
 800683e:	2800      	cmp	r0, #0
 8006840:	f43f aefa 	beq.w	8006638 <__ieee754_pow+0x788>
 8006844:	e7e9      	b.n	800681a <__ieee754_pow+0x96a>
 8006846:	f04f 0a00 	mov.w	sl, #0
 800684a:	e720      	b.n	800668e <__ieee754_pow+0x7de>
 800684c:	4621      	mov	r1, r4
 800684e:	e7d6      	b.n	80067fe <__ieee754_pow+0x94e>
 8006850:	f04f 0b00 	mov.w	fp, #0
 8006854:	f8df c078 	ldr.w	ip, [pc, #120]	; 80068d0 <__ieee754_pow+0xa20>
 8006858:	f7ff bbba 	b.w	8005fd0 <__ieee754_pow+0x120>
 800685c:	f04f 0b00 	mov.w	fp, #0
 8006860:	f04f 0c00 	mov.w	ip, #0
 8006864:	f7ff bbb4 	b.w	8005fd0 <__ieee754_pow+0x120>
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7ff bb3d 	b.w	8005eea <__ieee754_pow+0x3a>
 8006870:	9200      	str	r2, [sp, #0]
 8006872:	f7ff bb89 	b.w	8005f88 <__ieee754_pow+0xd8>
 8006876:	2300      	movs	r3, #0
 8006878:	f7ff bb73 	b.w	8005f62 <__ieee754_pow+0xb2>
 800687c:	f3af 8000 	nop.w
 8006880:	652b82fe 	.word	0x652b82fe
 8006884:	3c971547 	.word	0x3c971547
 8006888:	00000000 	.word	0x00000000
 800688c:	3fe62e43 	.word	0x3fe62e43
 8006890:	fefa39ef 	.word	0xfefa39ef
 8006894:	3fe62e42 	.word	0x3fe62e42
 8006898:	0ca86c39 	.word	0x0ca86c39
 800689c:	be205c61 	.word	0xbe205c61
 80068a0:	72bea4d0 	.word	0x72bea4d0
 80068a4:	3e663769 	.word	0x3e663769
 80068a8:	c5d26bf1 	.word	0xc5d26bf1
 80068ac:	3ebbbd41 	.word	0x3ebbbd41
 80068b0:	af25de2c 	.word	0xaf25de2c
 80068b4:	3f11566a 	.word	0x3f11566a
 80068b8:	16bebd93 	.word	0x16bebd93
 80068bc:	3f66c16c 	.word	0x3f66c16c
 80068c0:	5555553e 	.word	0x5555553e
 80068c4:	3fc55555 	.word	0x3fc55555
 80068c8:	3fe00000 	.word	0x3fe00000
 80068cc:	000fffff 	.word	0x000fffff
 80068d0:	3ff00000 	.word	0x3ff00000
 80068d4:	4090cbff 	.word	0x4090cbff
 80068d8:	3f6f3400 	.word	0x3f6f3400

080068dc <__ieee754_sqrt>:
 80068dc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006a38 <__ieee754_sqrt+0x15c>
 80068e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e4:	ea3c 0c01 	bics.w	ip, ip, r1
 80068e8:	4606      	mov	r6, r0
 80068ea:	460d      	mov	r5, r1
 80068ec:	460c      	mov	r4, r1
 80068ee:	460a      	mov	r2, r1
 80068f0:	4607      	mov	r7, r0
 80068f2:	4603      	mov	r3, r0
 80068f4:	d10f      	bne.n	8006916 <__ieee754_sqrt+0x3a>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	f7f9 fde5 	bl	80004c8 <__aeabi_dmul>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4630      	mov	r0, r6
 8006904:	4629      	mov	r1, r5
 8006906:	f7f9 fc29 	bl	800015c <__adddf3>
 800690a:	4606      	mov	r6, r0
 800690c:	460d      	mov	r5, r1
 800690e:	4630      	mov	r0, r6
 8006910:	4629      	mov	r1, r5
 8006912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006916:	2900      	cmp	r1, #0
 8006918:	dc0e      	bgt.n	8006938 <__ieee754_sqrt+0x5c>
 800691a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800691e:	ea5c 0707 	orrs.w	r7, ip, r7
 8006922:	d0f4      	beq.n	800690e <__ieee754_sqrt+0x32>
 8006924:	b141      	cbz	r1, 8006938 <__ieee754_sqrt+0x5c>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	f7f9 fc15 	bl	8000158 <__aeabi_dsub>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	f7f9 fef3 	bl	800071c <__aeabi_ddiv>
 8006936:	e7e8      	b.n	800690a <__ieee754_sqrt+0x2e>
 8006938:	1521      	asrs	r1, r4, #20
 800693a:	d075      	beq.n	8006a28 <__ieee754_sqrt+0x14c>
 800693c:	07cc      	lsls	r4, r1, #31
 800693e:	f04f 0400 	mov.w	r4, #0
 8006942:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006946:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800694a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800694e:	bf5e      	ittt	pl
 8006950:	0fd9      	lsrpl	r1, r3, #31
 8006952:	005b      	lslpl	r3, r3, #1
 8006954:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006958:	0fd9      	lsrs	r1, r3, #31
 800695a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800695e:	2516      	movs	r5, #22
 8006960:	4620      	mov	r0, r4
 8006962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006966:	107f      	asrs	r7, r7, #1
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	1846      	adds	r6, r0, r1
 800696c:	4296      	cmp	r6, r2
 800696e:	bfde      	ittt	le
 8006970:	1b92      	suble	r2, r2, r6
 8006972:	1870      	addle	r0, r6, r1
 8006974:	1864      	addle	r4, r4, r1
 8006976:	0052      	lsls	r2, r2, #1
 8006978:	3d01      	subs	r5, #1
 800697a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800697e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006982:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006986:	d1f0      	bne.n	800696a <__ieee754_sqrt+0x8e>
 8006988:	4629      	mov	r1, r5
 800698a:	f04f 0e20 	mov.w	lr, #32
 800698e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006992:	4282      	cmp	r2, r0
 8006994:	eb06 0c05 	add.w	ip, r6, r5
 8006998:	dc02      	bgt.n	80069a0 <__ieee754_sqrt+0xc4>
 800699a:	d113      	bne.n	80069c4 <__ieee754_sqrt+0xe8>
 800699c:	459c      	cmp	ip, r3
 800699e:	d811      	bhi.n	80069c4 <__ieee754_sqrt+0xe8>
 80069a0:	f1bc 0f00 	cmp.w	ip, #0
 80069a4:	eb0c 0506 	add.w	r5, ip, r6
 80069a8:	da43      	bge.n	8006a32 <__ieee754_sqrt+0x156>
 80069aa:	2d00      	cmp	r5, #0
 80069ac:	db41      	blt.n	8006a32 <__ieee754_sqrt+0x156>
 80069ae:	f100 0801 	add.w	r8, r0, #1
 80069b2:	1a12      	subs	r2, r2, r0
 80069b4:	4640      	mov	r0, r8
 80069b6:	459c      	cmp	ip, r3
 80069b8:	bf88      	it	hi
 80069ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80069be:	eba3 030c 	sub.w	r3, r3, ip
 80069c2:	4431      	add	r1, r6
 80069c4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80069c8:	f1be 0e01 	subs.w	lr, lr, #1
 80069cc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80069d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80069d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80069d8:	d1db      	bne.n	8006992 <__ieee754_sqrt+0xb6>
 80069da:	4313      	orrs	r3, r2
 80069dc:	d006      	beq.n	80069ec <__ieee754_sqrt+0x110>
 80069de:	1c48      	adds	r0, r1, #1
 80069e0:	bf0b      	itete	eq
 80069e2:	4671      	moveq	r1, lr
 80069e4:	3101      	addne	r1, #1
 80069e6:	3401      	addeq	r4, #1
 80069e8:	f021 0101 	bicne.w	r1, r1, #1
 80069ec:	1063      	asrs	r3, r4, #1
 80069ee:	0849      	lsrs	r1, r1, #1
 80069f0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80069f4:	07e2      	lsls	r2, r4, #31
 80069f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80069fa:	bf48      	it	mi
 80069fc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006a00:	460e      	mov	r6, r1
 8006a02:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006a06:	e782      	b.n	800690e <__ieee754_sqrt+0x32>
 8006a08:	0ada      	lsrs	r2, r3, #11
 8006a0a:	3815      	subs	r0, #21
 8006a0c:	055b      	lsls	r3, r3, #21
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d0fa      	beq.n	8006a08 <__ieee754_sqrt+0x12c>
 8006a12:	02d5      	lsls	r5, r2, #11
 8006a14:	d50a      	bpl.n	8006a2c <__ieee754_sqrt+0x150>
 8006a16:	f1c1 0420 	rsb	r4, r1, #32
 8006a1a:	fa23 f404 	lsr.w	r4, r3, r4
 8006a1e:	1e4d      	subs	r5, r1, #1
 8006a20:	408b      	lsls	r3, r1
 8006a22:	4322      	orrs	r2, r4
 8006a24:	1b41      	subs	r1, r0, r5
 8006a26:	e789      	b.n	800693c <__ieee754_sqrt+0x60>
 8006a28:	4608      	mov	r0, r1
 8006a2a:	e7f0      	b.n	8006a0e <__ieee754_sqrt+0x132>
 8006a2c:	0052      	lsls	r2, r2, #1
 8006a2e:	3101      	adds	r1, #1
 8006a30:	e7ef      	b.n	8006a12 <__ieee754_sqrt+0x136>
 8006a32:	4680      	mov	r8, r0
 8006a34:	e7bd      	b.n	80069b2 <__ieee754_sqrt+0xd6>
 8006a36:	bf00      	nop
 8006a38:	7ff00000 	.word	0x7ff00000

08006a3c <with_errno>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	4604      	mov	r4, r0
 8006a40:	460d      	mov	r5, r1
 8006a42:	4616      	mov	r6, r2
 8006a44:	f7fe ff4a 	bl	80058dc <__errno>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	6006      	str	r6, [r0, #0]
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}

08006a50 <xflow>:
 8006a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a52:	4615      	mov	r5, r2
 8006a54:	461c      	mov	r4, r3
 8006a56:	b180      	cbz	r0, 8006a7a <xflow+0x2a>
 8006a58:	4610      	mov	r0, r2
 8006a5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a5e:	e9cd 0100 	strd	r0, r1, [sp]
 8006a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a66:	4628      	mov	r0, r5
 8006a68:	4621      	mov	r1, r4
 8006a6a:	f7f9 fd2d 	bl	80004c8 <__aeabi_dmul>
 8006a6e:	2222      	movs	r2, #34	; 0x22
 8006a70:	b003      	add	sp, #12
 8006a72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a76:	f7ff bfe1 	b.w	8006a3c <with_errno>
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	e7ee      	b.n	8006a5e <xflow+0xe>

08006a80 <__math_uflow>:
 8006a80:	2200      	movs	r2, #0
 8006a82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a86:	f7ff bfe3 	b.w	8006a50 <xflow>

08006a8a <__math_oflow>:
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006a90:	f7ff bfde 	b.w	8006a50 <xflow>

08006a94 <finite>:
 8006a94:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006a98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006a9c:	0fc0      	lsrs	r0, r0, #31
 8006a9e:	4770      	bx	lr

08006aa0 <scalbn>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	4617      	mov	r7, r2
 8006aac:	460b      	mov	r3, r1
 8006aae:	b996      	cbnz	r6, 8006ad6 <scalbn+0x36>
 8006ab0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ab4:	4303      	orrs	r3, r0
 8006ab6:	d039      	beq.n	8006b2c <scalbn+0x8c>
 8006ab8:	4b33      	ldr	r3, [pc, #204]	; (8006b88 <scalbn+0xe8>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	f7f9 fd04 	bl	80004c8 <__aeabi_dmul>
 8006ac0:	4b32      	ldr	r3, [pc, #200]	; (8006b8c <scalbn+0xec>)
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	429f      	cmp	r7, r3
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	da0f      	bge.n	8006aea <scalbn+0x4a>
 8006aca:	a32b      	add	r3, pc, #172	; (adr r3, 8006b78 <scalbn+0xd8>)
 8006acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad0:	f7f9 fcfa 	bl	80004c8 <__aeabi_dmul>
 8006ad4:	e006      	b.n	8006ae4 <scalbn+0x44>
 8006ad6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006ada:	4296      	cmp	r6, r2
 8006adc:	d10a      	bne.n	8006af4 <scalbn+0x54>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	f7f9 fb3c 	bl	800015c <__adddf3>
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	460d      	mov	r5, r1
 8006ae8:	e020      	b.n	8006b2c <scalbn+0x8c>
 8006aea:	460b      	mov	r3, r1
 8006aec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006af0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006af4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006af8:	19b9      	adds	r1, r7, r6
 8006afa:	4291      	cmp	r1, r2
 8006afc:	dd0e      	ble.n	8006b1c <scalbn+0x7c>
 8006afe:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006b02:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006b06:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006b0a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006b0e:	4820      	ldr	r0, [pc, #128]	; (8006b90 <scalbn+0xf0>)
 8006b10:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006b14:	a31a      	add	r3, pc, #104	; (adr r3, 8006b80 <scalbn+0xe0>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	e7d9      	b.n	8006ad0 <scalbn+0x30>
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	dd08      	ble.n	8006b32 <scalbn+0x92>
 8006b20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b28:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4629      	mov	r1, r5
 8006b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b32:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006b36:	da12      	bge.n	8006b5e <scalbn+0xbe>
 8006b38:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b3c:	429f      	cmp	r7, r3
 8006b3e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006b42:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006b46:	dcdc      	bgt.n	8006b02 <scalbn+0x62>
 8006b48:	a30b      	add	r3, pc, #44	; (adr r3, 8006b78 <scalbn+0xd8>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006b52:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006b56:	480f      	ldr	r0, [pc, #60]	; (8006b94 <scalbn+0xf4>)
 8006b58:	f041 011f 	orr.w	r1, r1, #31
 8006b5c:	e7b8      	b.n	8006ad0 <scalbn+0x30>
 8006b5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b62:	3136      	adds	r1, #54	; 0x36
 8006b64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b68:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	4629      	mov	r1, r5
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <scalbn+0xf8>)
 8006b74:	e7ac      	b.n	8006ad0 <scalbn+0x30>
 8006b76:	bf00      	nop
 8006b78:	c2f8f359 	.word	0xc2f8f359
 8006b7c:	01a56e1f 	.word	0x01a56e1f
 8006b80:	8800759c 	.word	0x8800759c
 8006b84:	7e37e43c 	.word	0x7e37e43c
 8006b88:	43500000 	.word	0x43500000
 8006b8c:	ffff3cb0 	.word	0xffff3cb0
 8006b90:	8800759c 	.word	0x8800759c
 8006b94:	c2f8f359 	.word	0xc2f8f359
 8006b98:	3c900000 	.word	0x3c900000

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
